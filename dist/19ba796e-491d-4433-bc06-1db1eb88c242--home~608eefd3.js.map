{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./nerdlets/home/Components/TimeDropdown/TimeDropdown.js","webpack:///./nerdlets/home/Components/SearchBar/Searchbar.js","webpack:///./nerdlets/home/Components/ParentCard/Card/Cardlist.js","webpack:///./nerdlets/home/Components/ParentCard/Card/OCA_User_Journey.js","webpack:///./nerdlets/home/Components/ParentCard/Card/CPQ_User_Journey.js","webpack:///./nerdlets/home/Components/ParentCard/Card/OSV.js","webpack:///./nerdlets/home/Components/ParentCard/Card/Ecommerce_B2B.js","webpack:///./nerdlets/home/Components/ParentCard/Card/Ecommerce_B2C.js","webpack:///./nerdlets/home/Components/ParentCard/ParentCard.js","webpack:///./nerdlets/home/Components/Navbar.js","webpack:///./nerdlets/home/Components/App.js","webpack:///./nerdlets/home/index.js","webpack:///external \"(function() { throw new Error(\\\"Could not initialize \\\\\\\"nr1\\\\\\\"\\\"); })()\"","webpack:///external \"(function() { throw new Error(\\\"Could not initialize \\\\\\\"__nr1-internal__\\\\\\\"\\\"); })()\""],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","deferredModule","fulfilled","j","depId","splice","installedModules","__webpack_require__","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","__publicPath","publicPath","__factory","nr1Module","nr1InternalModule","requireFn","nr1ModuleId","nr1InternalModuleId","__webpack_require_factory__","TimeDropdown","timeCollector","useState","selectedTime","setSelectedTime","htmlFor","id","onChange","event","target","disabled","label","map","option","Searchbar","setSearchTerm","InputGroup","className","FormControl","placeholder","e","Text","icon","faSearch","size","Cardlist","cardName","timeUpdater","guid","colorSetter","setLoading","setError","progressCountStatus","userData","setUserData","app_name","current","prev","status_val","criticalAlertCount","warningAlertCount","headlineStatus","userData_Custom","setUserData_Custom","metricComparison","setMetricCompariosn","useEffect","fetchUserData","a","Page_url_in_key_value","fetchNerdGraphQuery","list_of_guids_Promise","list_of_guid_result","actor","account","workload","collection","entities","list_of_guids","join","entity_Info_Promise","entity_info_result","dict","filter","infra_status_Promise","synthetic","sythe","synthetic_Promise","nrql","rawResponse","results","latest","result","previous","headlineStatusPromise","criticalAlertCountPromise","warningAlertCountPromise","theProgressCountPromise","infra_workloads","infra","fetch_arrow_color_query_Promise","Promise","all","theProgressCount","fetch_arrow_color_query","events","progressCountOccurance","getOccuranceObject","progressCount","formatObject","fetch_App_name_Promise","fetch_App_name","members","appName","fetch_end_userPerformance_Promise","fetch_user_performance","fetch_URI_name_Promise","facets","forEach","fetch_response_time_Promise","fetch_login_custom_func","fetch_Partner_custom_func","fetch_HomePage_custom_func","fetch_response_time","fetch_login_custom","fetch_Partner_custom","fetch_HomePage_custom","prevState","average","count","alert","console","error","response","Error","message","response_Time_Promise","dynamicURI","deafultHeadingColor","progressBarUI","variant","ProgressBar","now","pageClassNames","pageName","getClassNameForPages","showToolTipsValue","pageObject","warning_threshold","critical_threshold","Col","Card","style","maxHeight","marginBottom","border","Header","Body","Title","display","alignItems","width","marginLeft","ListGroup","Item","Row","sm","faCaretUp","color","faCaretDown","OverlayTrigger","placement","overlay","Tooltip","toFixed","href","cursor","query","NerdGraphQuery","statusOccurances","timesliceData","timeSeries","inspectedCount","obj","keys","includes","output","maxLength","Math","max","values","arr","formattedEntry","undefined","unknown","degraded","disrupted","OCA_User","fetch_throughput","fetch_custom_1","fetch_custom_2","fetch_custom_3","CPQ_User","OSV","Ecommerce_B2B_User","Ecommerce_B2C_User","ParentCard","setTimeUpdater","maxWidth","margin","md","offset","time","xs","lg","xl","OCA_User_Journey","CPQ_User_Journey","Ecommerce_B2B","Ecommerce_B2C","TopBar","Navbar","bg","sticky","Container","Brand","fontWeight","lineHeight","App","HomeNerdlet","StrictMode"],"mappings":"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","file":"19ba796e-491d-4433-bc06-1db1eb88c242--home~608eefd3.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n \t/*** START WEBPACK REQUIRE CACHE FACTORY ***/\n \t function __webpack_require_factory__(nr1ModuleId, nr1Module, nr1InternalModuleId, nr1InternalModule) {\n \t    // The module cache.\n \t    var installedModules = {};\n \t     // Create the NR1 module and put it in the cache.\n \t    installedModules[nr1ModuleId] = {\n \t        i: nr1ModuleId,\n \t        l: true,\n \t        exports: nr1Module\n \t    };\n \t     // Create the NR1 internal module and put it in the cache.\n \t    installedModules[nr1InternalModuleId] = {\n \t        i: nr1InternalModuleId,\n \t        l: true,\n \t        exports: nr1InternalModule\n \t    };\n \t     // The require function.\n \t    function __webpack_require__(moduleId) {\n \t        \n \t// Check if module is in cache\n \tif(installedModules[moduleId]) {\n \t\treturn installedModules[moduleId].exports;\n \t}\n \t// Create a new module (and put it into the cache)\n \tvar module = installedModules[moduleId] = {\n \t\ti: moduleId,\n \t\tl: false,\n \t\texports: {}\n \t};\n\n \t// Execute the module function\n \tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t// Flag the module as loaded\n \tmodule.l = true;\n\n \t// Return the exports of the module\n \treturn module.exports;\n \t    }\n \t     // Require extensions.\n \t    \n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"https://cli-assets.service.datanerd.us/artifact-index-production/19ba796e-491d-4433-bc06-1db1eb88c242/det/\";;\n \t     return __webpack_require__;\n \t}\n \t /*** END WEBPACK REQUIRE CACHE FACTORY ***/\n \t \n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"https://cli-assets.service.datanerd.us/artifact-index-production/19ba796e-491d-4433-bc06-1db1eb88c242/det/\";\n\n \tvar jsonpArray = window[\"webpackJsonp__19ba796e-491d-4433-bc06-1db1eb88c242\"] = window[\"webpackJsonp__19ba796e-491d-4433-bc06-1db1eb88c242\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"0SmE\",1]);\n \t// run deferred modules when ready\n \tcheckDeferredModules();\n \t /*** START CUSTOM FACTORY EXPOSURE ***/\n \t var ns = {\n \t    __publicPath: function (publicPath) {\n \t        __webpack_require__.p = publicPath;\n \t    },\n \t     __factory: function (nr1Module, nr1InternalModule) {\n \t        const nr1ModuleId = \"Xznc\";\n \t        const nr1InternalModuleId = \"evsE\";\n \t        const requireFn = __webpack_require_factory__(nr1ModuleId, nr1Module, nr1InternalModuleId, nr1InternalModule);\n \t         return requireFn(\"0SmE\");\n \t    }\n \t};\n \t return ns;\n \t /*** END CUSTOM FACTORY EXPOSURE ***/\n","import React, { useState } from 'react';\r\n\r\nconst TimeDropdown = ({ timeCollector }) => {\r\n    const [selectedTime, setSelectedTime] = useState('5 MINUTES');\r\n\r\n    // Function to handle the change in selected time\r\n    const handleTimeChange = (event) => {\r\n        setSelectedTime(event.target.value);\r\n        timeCollector(event.target.value)\r\n    };\r\n\r\n\r\n    //all the time options\r\n    const timeOptions = [\r\n        { value: '5 MINUTES', label: '5 Minutes' },\r\n        { value: '30 MINUTES', label: '30 Minutes' },\r\n        { value: '60 MINUTES', label: '60 Minutes' },\r\n        { value: '3 HOUR', label: '3 Hours' },\r\n        { value: '6 HOUR', label: '6 Hours' },\r\n        { value: '12 HOUR', label: '12 Hours' },\r\n        { value: '24 HOUR', label: '24 Hours' },\r\n        { value: '3 DAYS', label: '3 Days' },\r\n        { value: '7 DAYS', label: '7 Days' },\r\n    ];\r\n\r\n\r\n    return (\r\n        <div>\r\n            <label htmlFor=\"timeSelect\">Select Time:</label>\r\n            <select\r\n                id=\"timeSelect\"\r\n                value={selectedTime}\r\n                onChange={handleTimeChange}\r\n            >\r\n                <option value=\"\" disabled>Select a time</option>\r\n                {\r\n                    timeOptions.map((option) => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.value}\r\n                        </option>\r\n                    ))}\r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TimeDropdown;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport React, { useState } from 'react';\r\nimport { FormControl, InputGroup } from 'react-bootstrap';\r\n\r\nconst Searchbar = ({ setSearchTerm }) => {\r\n\r\n    const [name, setName] = useState('')\r\n\r\n    const onevenetChange = (e) => {\r\n        setSearchTerm(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <InputGroup className=\"mb-3 mt-3\"  >\r\n            <FormControl\r\n                placeholder=\"Search...\"\r\n                aria-label=\"Search\"\r\n                aria-describedby=\"basic-addon1\"\r\n                onChange={onevenetChange}\r\n            />\r\n            <InputGroup.Text id=\"basic-addon1\">\r\n                <FontAwesomeIcon\r\n                    icon={faSearch} size='2x' />\r\n            </InputGroup.Text>\r\n        </InputGroup>\r\n    );\r\n};\r\n\r\nexport default Searchbar;","import React, { useEffect, useState } from 'react';\r\nimport { Button, Container, ListGroup, ProgressBar } from 'react-bootstrap';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\n\r\n\r\n\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n// nerdGraph\r\nimport { NerdGraphQuery } from 'nr1';\r\n\r\nconst Cardlist = ({ cardName, timeUpdater, guid, colorSetter }) => {\r\n\r\n\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [userData, setUserData] = useState({\r\n        progressCountStatus: []\r\n    });\r\n\r\n    const [userData_Custom, setUserData_Custom] = useState({\r\n        app_name: \"\",\r\n        \"Response time\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        \"Login Page\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        'Partner Authentication': {\r\n            current: null,\r\n            prev: null,\r\n\r\n        },\r\n        \"Home Page\": {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        status_val: \"\",\r\n        \"Synthetic availability\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        \"End user experience\": {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        criticalAlertCount: {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        warningAlertCount: {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        headlineStatus: null,\r\n        progressCountStatus: []\r\n    })\r\n\r\n    const [metricComparison, setMetricCompariosn] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchUserData = async () => {\r\n\r\n            try {\r\n\r\n                const wl_guid = \"Mjc4MTY2N3xOUjF8V09SS0xPQUR8MjAzNzEy\";\r\n                let Page_url_in_key_value = {};\r\n\r\n                var entities = [];\r\n\r\n                const list_of_guids_Promise = await fetchNerdGraphQuery(`\r\n           query \r\n             {\r\n          actor {\r\n                user {\r\n                  name\r\n                }\r\n                account(id: 2781667) {\r\n                  workload {\r\n                    collection(guid: \"${wl_guid}\") {\r\n                      name\r\n                      entities {\r\n                        guid\r\n                      }\r\n                    }\r\n                  }\r\n              }\r\n          }\r\n        }\r\n        `)\r\n\r\n                const list_of_guid_result = list_of_guids_Promise.actor.account.workload.collection.entities;\r\n\r\n\r\n                //* Inserting all the guids\r\n                const list_of_guids = [];\r\n\r\n                for (var i = 0; i < list_of_guid_result.length; i++) {\r\n                    list_of_guids.push(list_of_guid_result[i].guid);\r\n                }\r\n\r\n                const entity_Info_Promise = await fetchNerdGraphQuery(`\r\n            query {\r\n              actor {\r\n                account(id: 2781667) {\r\n                  id\r\n                }\r\n                entities(guids: [${list_of_guids.map(guid => `\"${guid}\"`).join(',')}]) {\r\n                  name\r\n                  entityType\r\n                  type\r\n                }\r\n              }\r\n            }\r\n        `);\r\n\r\n                const entity_info_result = entity_Info_Promise.actor.entities\r\n\r\n                let dict = {};\r\n                dict[\"infra_workloads\"] = entity_info_result\r\n                    .filter((i) => i[\"entityType\"] === \"WORKLOAD_ENTITY\")\r\n                    .map((i) => i[\"name\"]);\r\n\r\n                dict[\"synthetic\"] = entity_info_result\r\n                    .filter((i) => i[\"entityType\"] === \"SYNTHETIC_MONITOR_ENTITY\")\r\n                    .map((i) => i[\"name\"]);\r\n\r\n\r\n\r\n                const infra_status_Promise = await fetchNerdGraphQuery(`\r\n            query {\r\n              actor {\r\n                user {\r\n                  name\r\n                }\r\n                account(id: 2781667) {\r\n                  nrql(\r\n                    query: \"from WorkloadStatus select latest(statusValue) where entity.name = 'GCC_HardwareLedQuoting'\"\r\n                  ) {\r\n                    embeddedChartUrl\r\n                    nrql\r\n                    otherResult\r\n                    rawResponse\r\n                    staticChartUrl\r\n                    totalResult\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          `);\r\n\r\n                const synthetic_Promise = await fetchNerdGraphQuery(`\r\n                query {\r\n                  actor {\r\n                    user {\r\n                      name\r\n                    }\r\n                    account(id: 2781667) {\r\n                      nrql(\r\n                        query: \"FROM SyntheticCheck SELECT percentage(count(result), WHERE result='SUCCESS') WHERE monitorName IN (${dict.synthetic.map(sythe => `'${sythe}'`).join(',')}) SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                      ) {\r\n                        embeddedChartUrl\r\n                        nrql\r\n                        otherResult\r\n                        rawResponse\r\n                        staticChartUrl\r\n                        totalResult\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n          `);\r\n\r\n                setUserData_Custom({\r\n                    status_val: infra_status_Promise.actor.account.nrql.rawResponse.results[0].latest,\r\n                    \"Synthetic availability\": {\r\n                        current: synthetic_Promise.actor.account.nrql.rawResponse.current.results[0].result,\r\n                        prev: synthetic_Promise.actor.account.nrql.rawResponse.previous.results[0].result,\r\n                    }\r\n                })\r\n\r\n\r\n                const headlineStatusPromise = fetchNerdGraphQuery(`\r\n                  query {\r\n                    actor {\r\n                      user {\r\n                        name\r\n                      }\r\n                      account(id: 2781667) {\r\n                        nrql(\r\n                          query: \"FROM WorkloadStatus SELECT latest(statusValue) WHERE workloadGuid='${guid}' SINCE 5 Minutes AGO\"\r\n                        ) {\r\n                          embeddedChartUrl\r\n                          nrql\r\n                          otherResult\r\n                          rawResponse\r\n                          staticChartUrl\r\n                          totalResult\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n          `)\r\n\r\n\r\n                const criticalAlertCountPromise = fetchNerdGraphQuery(`{\r\n                  actor {\r\n                    user {\r\n                      name\r\n                    }\r\n                account(id: 2781667) {\r\n                nrql(\r\n                        query: \"SELECT count(*) from NrAiIncident where event = 'open' and priority = 'critical' And entity.name in ('210135-Partner Ready Portal (PRP)-Production', '212948-Next Generation Quoter-PRD', '213051-Next Gen Quote-To-Order Conversion Engine-PRD')  SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                      ) {\r\n                        embeddedChartUrl\r\n                        nrql\r\n                        otherResult\r\n                        rawResponse\r\n                        staticChartUrl\r\n                        totalResult\r\n                      } \r\n                    }\r\n                  }\r\n                }\r\n          `)\r\n\r\n                const warningAlertCountPromise = fetchNerdGraphQuery(`{\r\n                      actor {\r\n                        user {\r\n                          name\r\n                        }\r\n                    account(id: 2781667) {\r\n                    nrql(\r\n                            query: \"SELECT count(*) from NrAiIncident where event = 'open' and priority = 'warning' And entity.name in ('210135-Partner Ready Portal (PRP)-Production', '212948-Next Generation Quoter-PRD', '213051-Next Gen Quote-To-Order Conversion Engine-PRD')  SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                          ) {\r\n                            embeddedChartUrl\r\n                            nrql\r\n                            otherResult\r\n                            rawResponse\r\n                            staticChartUrl\r\n                            totalResult\r\n                          } \r\n                        }\r\n                      }\r\n                    }\r\n                    \r\n          `)\r\n\r\n                const theProgressCountPromise = fetchNerdGraphQuery(`{\r\n            actor {\r\n              account(id: 2781667) {\r\n                nrql(query: \"FROM WorkloadStatus SELECT count(*) SINCE 3 HOURS AGO WHERE entity.name IN (${dict.infra_workloads.map(infra => `'${infra}'`).join(',')}) FACET statusValue TIMESERIES 18 MINUTES\") {\r\n                  embeddedChartUrl\r\n                  nrql\r\n                  otherResult\r\n                  rawResponse\r\n                  staticChartUrl\r\n                  totalResult\r\n                }\r\n              }\r\n            }\r\n          }`)\r\n\r\n                const fetch_arrow_color_query_Promise = fetchNerdGraphQuery(`{\r\n            actor {\r\n              account(id: 2781667) {\r\n                nrql(\r\n                  query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT standard_metric, custom_metric, warning_threshold, critical_threshold, comparison WHERE workload_name = 'PRP_Master_Workload'\"\r\n                ) {\r\n                  embeddedChartUrl\r\n                  nrql\r\n                  otherResult\r\n                  rawResponse\r\n                  staticChartUrl\r\n                  totalResult\r\n                }\r\n              }\r\n            }\r\n          }`)\r\n\r\n\r\n                const [\r\n                    criticalAlertCount,\r\n                    warningAlertCount,\r\n                    headlineStatus,\r\n                    theProgressCount,\r\n                    fetch_arrow_color_query\r\n                ] =\r\n                    await Promise.all([\r\n                        criticalAlertCountPromise,\r\n                        warningAlertCountPromise,\r\n                        headlineStatusPromise,\r\n                        theProgressCountPromise,\r\n                        fetch_arrow_color_query_Promise\r\n                    ])\r\n\r\n                setMetricCompariosn(fetch_arrow_color_query.actor.account.nrql.rawResponse.results[0].events)\r\n\r\n                let progressCountOccurance = getOccuranceObject(theProgressCount)\r\n                let progressCount = formatObject(progressCountOccurance)\r\n\r\n                setUserData({\r\n                    progressCountStatus: progressCount\r\n                });\r\n\r\n\r\n\r\n                // Fetching app name\r\n                const fetch_App_name = await fetch_App_name_Promise;\r\n                const appName = await fetch_App_name.actor.account.nrql.rawResponse.results[0].members[0];\r\n\r\n                // Fetching end user performance using the obtained app name\r\n                const fetch_user_performance = await fetch_end_userPerformance_Promise(appName);\r\n                //pagename and url in ket value pair\r\n                const fetch_url_pagename = await fetch_URI_name_Promise;\r\n\r\n\r\n                //separte page:urls\r\n                fetch_url_pagename.actor.account.nrql.rawResponse.facets.forEach(\r\n                    (e) => Page_url_in_key_value[e.name[0]] = e.name[1]\r\n                );\r\n\r\n\r\n                const [\r\n                    fetch_response_time,\r\n                    fetch_login_custom,\r\n                    fetch_Partner_custom,\r\n                    fetch_HomePage_custom\r\n                ] =\r\n                    await Promise.all([\r\n                        fetch_response_time_Promise(appName),\r\n                        fetch_login_custom_func(appName, Page_url_in_key_value['Login Page']),\r\n                        fetch_Partner_custom_func(appName, Page_url_in_key_value['Partner Authentication']),\r\n                        fetch_HomePage_custom_func(appName, Page_url_in_key_value['Home Page'])\r\n                    ])\r\n\r\n                setUserData_Custom(prevState => ({\r\n                    ...prevState,\r\n                    app_name: appName,\r\n                    \"Response time\": {\r\n                        current: fetch_response_time.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_response_time.actor.account.nrql.rawResponse.previous.results[0].average,\r\n                    },\r\n                    'Login Page': {\r\n                        current: fetch_login_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_login_custom.actor.account.nrql.rawResponse.previous.results[0].average,\r\n                    },\r\n                    'Partner Authentication': {\r\n                        current: fetch_Partner_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_Partner_custom.actor.account.nrql.rawResponse.previous.results[0].average\r\n                    },\r\n                    \"Home Page\": {\r\n                        current: fetch_HomePage_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_HomePage_custom.actor.account.nrql.rawResponse.previous.results[0].average\r\n                    },\r\n                    'End user experience': {\r\n                        current: fetch_user_performance.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: fetch_user_performance.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                    headlineStatus: headlineStatus.actor.account.nrql.rawResponse.results[0].latest,\r\n                    progressCountStatus: progressCount,\r\n                    criticalAlertCount: {\r\n                        current: criticalAlertCount.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: criticalAlertCount.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                    warningAlertCount: {\r\n                        current: warningAlertCount.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: warningAlertCount.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                }))\r\n                setLoading(false);\r\n            } catch (error) {\r\n                alert(error)\r\n                console.error('Error fetching user data:', error);\r\n                setError(error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchUserData();\r\n\r\n    }, [timeUpdater]);\r\n\r\n\r\n    //* query for appName\r\n    const fetch_App_name_Promise = fetchNerdGraphQuery(`{\r\n      actor {\r\n        account(id: 2781667) {\r\n          nrql(query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT uniques(app_name) WHERE workload_name = 'PRP_Master_Workload' SINCE 7 DAYS AGO\") {\r\n            embeddedChartUrl\r\n            nrql\r\n            otherResult\r\n            rawResponse\r\n            staticChartUrl\r\n            totalResult\r\n          }\r\n        }\r\n      }\r\n    }`);\r\n\r\n\r\n    /**\r\n     * * End user performance\r\n     * @appName : 210135-Partner Ready Portal (PRP)-Production\r\n     * */\r\n\r\n    const fetch_end_userPerformance_Promise = async (appName) => {\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"from Transaction select count(*) where appName IN ('210135-Partner Ready Portal (PRP)-Production', '212948-Next Generation Quoter-PRD', '213051-Next Gen Quote-To-Order Conversion Engine-PRD') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n        }`);\r\n            return response;\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    // Query for uri's\r\n    const fetch_URI_name_Promise = fetchNerdGraphQuery(`{\r\n        actor {\r\n          account(id: 2781667) {\r\n            nrql(query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT count(*) WHERE workload_name = 'PRP_Master_Workload' AND request_uri != 'NA' AND request_uri != 'custom_uri' FACET custom_metric, request_uri SINCE 7 DAYS AGO\") {\r\n              embeddedChartUrl\r\n              nrql\r\n              otherResult\r\n              rawResponse\r\n              staticChartUrl\r\n              totalResult\r\n            }\r\n          }\r\n        }\r\n      }`);\r\n\r\n    //Response time\r\n    const fetch_response_time_Promise = async (appName) => {\r\n\r\n        //* dynamic appName \r\n        try {\r\n            let response_Time_Promise = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName = '${appName}' SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n        }`);\r\n            return response_Time_Promise\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    /**\r\n      * * Login_cust | Partnerauth_cust | Homepage_cust\r\n      * @dynamicURI : /web/prp/login | /group/prp | /group/prp/home\r\n      * @appName : : 210135-Partner Ready Portal (PRP)-Production\r\n      */\r\n\r\n    const fetch_login_custom_func = async (appName, dynamicURI) => {\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"from Transaction select average(duration) where appName IN ('210135-Partner Ready Portal (PRP)-Production') and (request.uri like '%/web/prp' and request.headers.host = 'partner.hpe.com') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    const fetch_Partner_custom_func = async (appName, dynamicURI) => {\r\n\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"from Transaction select average(duration) where appName IN ('212948-Next Generation Quoter-PRD') and request.uri LIKE '%qids/saveNewQuoteToQids%' SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    const fetch_HomePage_custom_func = async (appName, dynamicURI) => {\r\n\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"from Transaction select average(duration) where appName IN ('212948-Next Generation Quoter-PRD') and request.uri like '%refreshOptimusWithSH%' SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n\r\n    let deafultHeadingColor = 'grayBackground'\r\n\r\n    if (userData_Custom.headlineStatus === 'OPERATIONAL') {\r\n        deafultHeadingColor = 'lightGreenBackground'\r\n    }\r\n    else if (userData_Custom.headlineStatus === 'DEGRADED') {\r\n        deafultHeadingColor = 'yellowBackground'\r\n    }\r\n    else if (userData_Custom.headlineStatus === 'DISRUPTED') {\r\n        deafultHeadingColor = 'redBackground'\r\n    }\r\n\r\n\r\n\r\n    // Progress bar UI\r\n    const progressBarUI = userData.progressCountStatus.map(key => {\r\n        let variant;\r\n        switch (key) {\r\n            case 'DEGRADED':\r\n                variant = 'warning';\r\n                break;\r\n            case 'DISRUPTED':\r\n                variant = 'danger';\r\n                break;\r\n            case 'OPERATIONAL':\r\n                variant = 'success';\r\n                break;\r\n            case 'UNKNOWN':\r\n                variant = 'secondary';\r\n                break;\r\n            default:\r\n                variant = 'info';\r\n                break;\r\n        }\r\n        return <ProgressBar variant={variant} now={10} key={key} />;\r\n    });\r\n\r\n\r\n\r\n    const getClassNameForPages = (e, pageName) => {\r\n        if (e['comparison'] === 'G') {\r\n            if (userData_Custom[pageName]?.current > e['critical_threshold']) {\r\n                return 'red';\r\n            }\r\n            if (userData_Custom[pageName]?.current >= e['warning_threshold'] && userData_Custom[pageName]?.current < e['critical_threshold']) {\r\n                return 'yellow';\r\n            }\r\n        }\r\n\r\n        if (e['comparison'] === 'L') {\r\n            if (userData_Custom[pageName]?.current < e['critical_threshold']) {\r\n                return 'red';\r\n            }\r\n            if (userData_Custom[pageName]?.current?.current < e['warning_threshold'] && userData_Custom[pageName]?.current > e['critical_threshold']) {\r\n                return 'yellow';\r\n            }\r\n        }\r\n\r\n        return 'green';\r\n    };\r\n\r\n    const pageClassNames = (pageName) => {\r\n\r\n\r\n        return metricComparison.map(e => {\r\n            if (e['custom_metric'] === pageName || e['standard_metric'] === pageName) {\r\n                return getClassNameForPages(e, pageName);\r\n            }\r\n            return '';\r\n        }).join(' ');\r\n    };\r\n\r\n    const showToolTipsValue = (pageName) => {\r\n        for (const pageObject of metricComparison) {\r\n            if (pageObject['standard_metric'] === pageName || pageObject['custom_metric'] === pageName) {\r\n                return (\r\n                    <div>\r\n                        Warning : {pageObject.warning_threshold}\r\n                        <br />\r\n                        Critical : {pageObject.critical_threshold}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Col>\r\n            <Card style={{ maxHeight: \"100%\", marginBottom: \"1.6rem\" }} border=\"dark\">\r\n                <Card.Header className={deafultHeadingColor}>\r\n                    {cardName}\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Card.Title>\r\n                        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                            <ProgressBar style={{ width: \"60%\" }}>{progressBarUI}</ProgressBar>\r\n                            <p style={{ marginLeft: \"10px\", marginBottom: \"0px\" }}> Host Status for 3h </p>\r\n                        </div>\r\n\r\n                    </Card.Title>\r\n                    <Card.Text>\r\n                        <ListGroup variant=\"flush\">\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}> Infrastructure Health </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={faCaretUp}\r\n                                            size=\"2x\"\r\n                                            style={{ color: \"green\" }}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        {userData_Custom.status_val ? userData_Custom.status_val : 'NA'}\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>\r\n                                        <span>Response Time (sec) </span>\r\n                                    </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={userData_Custom['Response time']?.current > userData_Custom['Response time']?.prev ? faCaretUp : faCaretDown}\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Response time')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Response time')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Response time']?.current ? userData_Custom['Response time']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Synthetic Availability (%) </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Synthetic availability']?.current >=\r\n                                                    userData_Custom['Synthetic availability']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Synthetic availability')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Synthetic availability')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Synthetic availability']?.current ?\r\n                                                    userData_Custom['Synthetic availability']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Throughput  </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['End user experience']?.current > userData_Custom['End user experience']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('End user experience')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('End user experience')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['End user experience']?.current ?\r\n                                                    userData_Custom['End user experience']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Login </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={userData_Custom['Login Page']?.current >\r\n                                                userData_Custom['Login Page']?.prev\r\n                                                ? faCaretUp\r\n                                                : faCaretDown}\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Login Page')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Login Page')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Login Page']?.current ?\r\n                                                    userData_Custom['Login Page']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Save New Quote to Qids</Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Partner Authentication']?.current > userData_Custom['Partner Authentication']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Partner Authentication')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Partner Authentication')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {\r\n                                                    userData_Custom['Partner Authentication']?.current ?\r\n                                                        userData_Custom['Partner Authentication']?.current.toFixed(2) : 'NA'\r\n                                                }\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Refresh Price</Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Home Page']?.current > userData_Custom['Home Page']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Home Page')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Home Page')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Home Page']?.current ?\r\n                                                    userData_Custom['Home Page']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Active Alerts </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={faCaretUp}\r\n                                            size=\"2x\"\r\n                                            className='green'\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>\r\n                                                    {\r\n                                                        <div>\r\n                                                            Warning :{\" \"}\r\n                                                            {\r\n                                                                userData_Custom?.warningAlertCount?.current &&\r\n                                                                userData_Custom?.warningAlertCount?.current.toFixed(2)\r\n                                                            }\r\n                                                            <br />\r\n                                                            Critical :{\" \"}\r\n                                                            <a\r\n                                                                target=\"_blank\"\r\n                                                                href=\"/\"\r\n                                                            >\r\n                                                                {\r\n                                                                    userData_Custom?.criticalAlertCount?.current &&\r\n                                                                    userData_Custom?.criticalAlertCount?.current.toFixed(2)\r\n                                                                }\r\n                                                            </a>\r\n                                                        </div>\r\n                                                    }\r\n                                                </Tooltip>\r\n                                            }\r\n                                        >\r\n                                            <span style={{ cursor: \"pointer\" }}>\r\n                                                {userData_Custom?.criticalAlertCount?.current !== 0 || userData_Custom?.warningAlertCount?.current !== 0 ?\r\n                                                    (\r\n                                                        userData_Custom?.criticalAlertCount?.current +\r\n                                                        userData_Custom?.warningAlertCount?.current\r\n                                                    ).toFixed(2) : \"NA\"}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        </Col>\r\n    );\r\n};\r\n\r\nexport default Cardlist;\r\n\r\n\r\n\r\n// Function to make a NerdGraph query\r\nconst fetchNerdGraphQuery = async (query) => {\r\n    const response = await NerdGraphQuery.query({ query });\r\n    return response.data;\r\n};\r\n\r\n\r\nconst getOccuranceObject = (data) => {\r\n\r\n    var statusOccurances = {};\r\n    const timesliceData = data.actor.account.nrql.rawResponse.facets;\r\n\r\n    for (var i = 0; i < timesliceData.length; i++) {\r\n        if (timesliceData[i].name == \"UNKNOWN\") {\r\n            statusOccurances[\"unknown\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"unknown\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"OPERATIONAL\") {\r\n            statusOccurances[\"operational\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"operational\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"DISRUPTED\") {\r\n            statusOccurances[\"disrupted\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"disrupted\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"DEGRADED\") {\r\n            statusOccurances[\"degraded\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"degraded\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else {\r\n            statusOccurances[\"unknown\"].push(0);\r\n            statusOccurances[\"operational\"].push(0);\r\n            statusOccurances[\"disrupted\"].push(0);\r\n            statusOccurances[\"degraded\"].push(0);\r\n        }\r\n    }\r\n\r\n    return statusOccurances\r\n}\r\n\r\nconst formatObject = (obj) => {\r\n\r\n    const keys = Object.keys(obj);\r\n\r\n    if (!keys.includes(\"unknown\")) {\r\n        obj[\"unknown\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"unknown\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"operational\")) {\r\n        obj[\"operational\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"operational\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"degraded\")) {\r\n        obj[\"degraded\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"degraded\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"disrupted\")) {\r\n        obj[\"disrupted\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"disrupted\"].push(0);\r\n        }\r\n    }\r\n\r\n    const result = [];\r\n    var output = [];\r\n    const maxLength = Math.max(\r\n        ...Object.values(obj).map((arr) => arr.length)\r\n    );\r\n\r\n    for (let i = 0; i < maxLength; i++) {\r\n        const formattedEntry = {};\r\n\r\n        for (const key in obj) {\r\n            formattedEntry[key] =\r\n                obj[key][i] !== undefined ? obj[key][i] : null;\r\n        }\r\n\r\n        result.push(formattedEntry);\r\n    }\r\n\r\n    for (var i = 0; i < result.length; i++) {\r\n        if (result[i].unknown != 0) {\r\n            output.push(\"UNKNOWN\");\r\n        } else if (result[i].degraded != 0) {\r\n            output.push(\"DEGRADED\");\r\n        } else if (result[i].disrupted != 0) {\r\n            output.push(\"DISRUPTED\");\r\n        } else {\r\n            output.push(\"OPERATIONAL\");\r\n        }\r\n    }\r\n    return output;\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Container, ListGroup, ProgressBar } from 'react-bootstrap';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\n\r\n\r\n\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n// nerdGraph\r\nimport { NerdGraphQuery } from 'nr1';\r\n\r\nconst OCA_User = ({ cardName, timeUpdater, guid, colorSetter }) => {\r\n\r\n\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [userData, setUserData] = useState({\r\n        progressCountStatus: []\r\n    });\r\n\r\n    const [userData_Custom, setUserData_Custom] = useState({\r\n        app_name: \"\",\r\n        \"Response time\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        \"Login Page\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        'Partner Authentication': {\r\n            current: null,\r\n            prev: null,\r\n\r\n        },\r\n        \"Home Page\": {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        status_val: \"\",\r\n        \"Synthetic availability\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        \"End user experience\": {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        criticalAlertCount: {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        warningAlertCount: {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        headlineStatus: null,\r\n        progressCountStatus: []\r\n    })\r\n\r\n    const [metricComparison, setMetricCompariosn] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchUserData = async () => {\r\n\r\n            try {\r\n\r\n                const wl_guid = \"Mjc4MTY2N3xOUjF8V09SS0xPQUR8MjAzNzEy\";\r\n                let Page_url_in_key_value = {};\r\n\r\n                var entities = [];\r\n\r\n                const list_of_guids_Promise = await fetchNerdGraphQuery(`\r\n           query \r\n             {\r\n          actor {\r\n                user {\r\n                  name\r\n                }\r\n                account(id: 2781667) {\r\n                  workload {\r\n                    collection(guid: \"${wl_guid}\") {\r\n                      name\r\n                      entities {\r\n                        guid\r\n                      }\r\n                    }\r\n                  }\r\n              }\r\n          }\r\n        }\r\n        `)\r\n\r\n                const list_of_guid_result = list_of_guids_Promise.actor.account.workload.collection.entities;\r\n\r\n\r\n                //* Inserting all the guids\r\n                const list_of_guids = [];\r\n\r\n                for (var i = 0; i < list_of_guid_result.length; i++) {\r\n                    list_of_guids.push(list_of_guid_result[i].guid);\r\n                }\r\n\r\n                const entity_Info_Promise = await fetchNerdGraphQuery(`\r\n            query {\r\n              actor {\r\n                account(id: 2781667) {\r\n                  id\r\n                }\r\n                entities(guids: [${list_of_guids.map(guid => `\"${guid}\"`).join(',')}]) {\r\n                  name\r\n                  entityType\r\n                  type\r\n                }\r\n              }\r\n            }\r\n        `);\r\n\r\n                const entity_info_result = entity_Info_Promise.actor.entities\r\n\r\n                let dict = {};\r\n                dict[\"infra_workloads\"] = entity_info_result\r\n                    .filter((i) => i[\"entityType\"] === \"WORKLOAD_ENTITY\")\r\n                    .map((i) => i[\"name\"]);\r\n\r\n                dict[\"synthetic\"] = entity_info_result\r\n                    .filter((i) => i[\"entityType\"] === \"SYNTHETIC_MONITOR_ENTITY\")\r\n                    .map((i) => i[\"name\"]);\r\n\r\n\r\n\r\n                const infra_status_Promise = await fetchNerdGraphQuery(`\r\n            query {\r\n              actor {\r\n                user {\r\n                  name\r\n                }\r\n                account(id: 2781667) {\r\n                  nrql(\r\n                    query: \"FROM WorkloadStatus SELECT latest(statusValue) WHERE entity.name IN ('OCA_Production_Infra')\"\r\n                  ) {\r\n                    embeddedChartUrl\r\n                    nrql\r\n                    otherResult\r\n                    rawResponse\r\n                    staticChartUrl\r\n                    totalResult\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          `);\r\n\r\n                const synthetic_Promise = await fetchNerdGraphQuery(`\r\n                query {\r\n                  actor {\r\n                    user {\r\n                      name\r\n                    }\r\n                    account(id: 2781667) {\r\n                      nrql(\r\n                        query: \"FROM SyntheticCheck SELECT percentage(count(result), WHERE result='SUCCESS') WHERE monitorName IN ('213082-Next Gen Config-PRD-OCA - AdvancedSearch','213082-Next Gen Config-PRD-OCA - Create Config','213082-Next Gen Config-PRD-OCA - Login & Logout','213082-Next Gen Config-PRD-OCA-SimpleSearch') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                      ) {\r\n                        embeddedChartUrl\r\n                        nrql\r\n                        otherResult\r\n                        rawResponse\r\n                        staticChartUrl\r\n                        totalResult\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n          `);\r\n\r\n                setUserData_Custom({\r\n                    status_val: infra_status_Promise.actor.account.nrql.rawResponse.results[0].latest,\r\n                    \"Synthetic availability\": {\r\n                        current: synthetic_Promise.actor.account.nrql.rawResponse.current.results[0].result,\r\n                        prev: synthetic_Promise.actor.account.nrql.rawResponse.previous.results[0].result,\r\n                    }\r\n                })\r\n\r\n\r\n                const headlineStatusPromise = fetchNerdGraphQuery(`\r\n                  query {\r\n                    actor {\r\n                      user {\r\n                        name\r\n                      }\r\n                      account(id: 2781667) {\r\n                        nrql(\r\n                          query: \"FROM WorkloadStatus SELECT latest(statusValue) WHERE entity.name='GCC_OCA User Journey' SINCE 5 Minutes AGO\"\r\n                        ) {\r\n                          embeddedChartUrl\r\n                          nrql\r\n                          otherResult\r\n                          rawResponse\r\n                          staticChartUrl\r\n                          totalResult\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n          `)\r\n\r\n\r\n                const criticalAlertCountPromise = fetchNerdGraphQuery(`{\r\n                  actor {\r\n                    user {\r\n                      name\r\n                    }\r\n                account(id: 2781667) {\r\n                nrql(\r\n                        query: \"SELECT count(*) from NrAiIncident where event = 'open' and priority = 'critical' and entity.name = '213082-Next Gen Config-PRD-OCA' SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                      ) {\r\n                        embeddedChartUrl\r\n                        nrql\r\n                        otherResult\r\n                        rawResponse\r\n                        staticChartUrl\r\n                        totalResult\r\n                      } \r\n                    }\r\n                  }\r\n                }\r\n          `)\r\n\r\n                const warningAlertCountPromise = fetchNerdGraphQuery(`{\r\n                      actor {\r\n                        user {\r\n                          name\r\n                        }\r\n                    account(id: 2781667) {\r\n                    nrql(\r\n                            query: \"SELECT count(*) from NrAiIncident where event = 'open' and priority = 'warning' and entity.name = '213082-Next Gen Config-PRD-OCA' SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                          ) {\r\n                            embeddedChartUrl\r\n                            nrql\r\n                            otherResult\r\n                            rawResponse\r\n                            staticChartUrl\r\n                            totalResult\r\n                          } \r\n                        }\r\n                      }\r\n                    }\r\n                    \r\n          `)\r\n\r\n                const theProgressCountPromise = fetchNerdGraphQuery(`{\r\n            actor {\r\n              account(id: 2781667) {\r\n                nrql(query: \"FROM WorkloadStatus SELECT count(*) SINCE 3 HOURS AGO WHERE entity.name IN ('OCA_Production_Infra') FACET statusValue TIMESERIES 18 MINUTES\") {\r\n                  embeddedChartUrl\r\n                  nrql\r\n                  otherResult\r\n                  rawResponse\r\n                  staticChartUrl\r\n                  totalResult\r\n                }\r\n              }\r\n            }\r\n          }`)\r\n\r\n                const fetch_arrow_color_query_Promise = fetchNerdGraphQuery(`{\r\n            actor {\r\n              account(id: 2781667) {\r\n                nrql(\r\n                  query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT standard_metric, custom_metric, warning_threshold, critical_threshold, comparison WHERE workload_name = 'PRP_Master_Workload'\"\r\n                ) {\r\n                  embeddedChartUrl\r\n                  nrql\r\n                  otherResult\r\n                  rawResponse\r\n                  staticChartUrl\r\n                  totalResult\r\n                }\r\n              }\r\n            }\r\n          }`)\r\n\r\n\r\n                const [\r\n                    criticalAlertCount,\r\n                    warningAlertCount,\r\n                    headlineStatus,\r\n                    theProgressCount,\r\n                    fetch_arrow_color_query\r\n                ] =\r\n                    await Promise.all([\r\n                        criticalAlertCountPromise,\r\n                        warningAlertCountPromise,\r\n                        headlineStatusPromise,\r\n                        theProgressCountPromise,\r\n                        fetch_arrow_color_query_Promise\r\n                    ])\r\n\r\n                setMetricCompariosn(fetch_arrow_color_query.actor.account.nrql.rawResponse.results[0].events)\r\n\r\n                let progressCountOccurance = getOccuranceObject(theProgressCount)\r\n                let progressCount = formatObject(progressCountOccurance)\r\n\r\n                setUserData({\r\n                    progressCountStatus: progressCount\r\n                });\r\n\r\n\r\n\r\n                // Fetching app name\r\n                const fetch_App_name = await fetch_App_name_Promise;\r\n                const appName = await fetch_App_name.actor.account.nrql.rawResponse.results[0].members[0];\r\n\r\n                // Fetching end user performance using the obtained app name\r\n                const fetch_user_performance = await fetch_throughput(appName);\r\n                //pagename and url in ket value pair\r\n                const fetch_url_pagename = await fetch_URI_name_Promise;\r\n\r\n\r\n                //separte page:urls\r\n                fetch_url_pagename.actor.account.nrql.rawResponse.facets.forEach(\r\n                    (e) => Page_url_in_key_value[e.name[0]] = e.name[1]\r\n                );\r\n\r\n\r\n                const [\r\n                    fetch_response_time,\r\n                    fetch_login_custom,\r\n                    fetch_Partner_custom,\r\n                    fetch_HomePage_custom\r\n                ] =\r\n                    await Promise.all([\r\n                        fetch_response_time_Promise(appName),\r\n                        fetch_custom_1(appName, Page_url_in_key_value['Login Page']),\r\n                        fetch_custom_2(appName, Page_url_in_key_value['Partner Authentication']),\r\n                        fetch_custom_3(appName, Page_url_in_key_value['Home Page'])\r\n                    ])\r\n\r\n                setUserData_Custom(prevState => ({\r\n                    ...prevState,\r\n                    app_name: appName,\r\n                    \"Response time\": {\r\n                        current: fetch_response_time.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_response_time.actor.account.nrql.rawResponse.previous.results[0].average,\r\n                    },\r\n                    'Login Page': {\r\n                        current: fetch_login_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_login_custom.actor.account.nrql.rawResponse.previous.results[0].average,\r\n                    },\r\n                    'Partner Authentication': {\r\n                        current: fetch_Partner_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_Partner_custom.actor.account.nrql.rawResponse.previous.results[0].average\r\n                    },\r\n                    \"Home Page\": {\r\n                        current: fetch_HomePage_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_HomePage_custom.actor.account.nrql.rawResponse.previous.results[0].average\r\n                    },\r\n                    'End user experience': {\r\n                        current: fetch_user_performance.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: fetch_user_performance.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                    headlineStatus: headlineStatus.actor.account.nrql.rawResponse.results[0].latest,\r\n                    progressCountStatus: progressCount,\r\n                    criticalAlertCount: {\r\n                        current: criticalAlertCount.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: criticalAlertCount.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                    warningAlertCount: {\r\n                        current: warningAlertCount.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: warningAlertCount.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                }))\r\n                setLoading(false);\r\n            } catch (error) {\r\n                alert(error)\r\n                console.error('Error fetching user data:', error);\r\n                setError(error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchUserData();\r\n\r\n    }, [timeUpdater]);\r\n\r\n\r\n    //* query for appName\r\n    const fetch_App_name_Promise = fetchNerdGraphQuery(`{\r\n      actor {\r\n        account(id: 2781667) {\r\n          nrql(query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT uniques(app_name) WHERE workload_name = 'PRP_Master_Workload' SINCE 7 DAYS AGO\") {\r\n            embeddedChartUrl\r\n            nrql\r\n            otherResult\r\n            rawResponse\r\n            staticChartUrl\r\n            totalResult\r\n          }\r\n        }\r\n      }\r\n    }`);\r\n\r\n\r\n    /**\r\n     * * End user performance\r\n     * @appName : 210135-Partner Ready Portal (PRP)-Production\r\n     * */\r\n\r\n    const fetch_throughput = async (appName) => {\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT count(*) WHERE appName = '213082-Next Gen Config-PRD-OCA' SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n        }`);\r\n\r\n            return response;\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    // Query for uri's\r\n    const fetch_URI_name_Promise = fetchNerdGraphQuery(`{\r\n        actor {\r\n          account(id: 2781667) {\r\n            nrql(query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT count(*) WHERE workload_name = 'PRP_Master_Workload' AND request_uri != 'NA' AND request_uri != 'custom_uri' FACET custom_metric, request_uri SINCE 7 DAYS AGO\") {\r\n              embeddedChartUrl\r\n              nrql\r\n              otherResult\r\n              rawResponse\r\n              staticChartUrl\r\n              totalResult\r\n            }\r\n          }\r\n        }\r\n      }`);\r\n\r\n    //Response time\r\n    const fetch_response_time_Promise = async (appName) => {\r\n\r\n        //* dynamic appName \r\n        try {\r\n            let response_Time_Promise = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName = '213082-Next Gen Config-PRD-OCA' SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n        }`);\r\n            return response_Time_Promise\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    /**\r\n      * * Login_cust | Partnerauth_cust | Homepage_cust\r\n      * @dynamicURI : /web/prp/login | /group/prp | /group/prp/home\r\n      * @appName : : 210135-Partner Ready Portal (PRP)-Production\r\n      */\r\n\r\n    const fetch_custom_1 = async (appName, dynamicURI) => {\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName = '213082-Next Gen Config-PRD-OCA' AND request.uri IN ('/oca/OCAPartnerLogin', '/oca/OCAPartnerIntegrationLogin') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    const fetch_custom_2 = async (appName, dynamicURI) => {\r\n\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName = '213082-Next Gen Config-PRD-OCA' AND Method_name IN ('update_prefs','get_widget_data','get_showleadtime') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    const fetch_custom_3 = async (appName, dynamicURI) => {\r\n\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName = '213082-Next Gen Config-PRD-OCA' AND Method_name IN ('get_tab_content','get_section_detail','upsellStateCheck','oca_export_bom','doClicCheck','clicBomRefresh','toggle_expert_bom','get_config_info','get_lead_time') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n\r\n    let deafultHeadingColor = 'grayBackground'\r\n\r\n    if (userData_Custom.headlineStatus === 'OPERATIONAL') {\r\n        deafultHeadingColor = 'lightGreenBackground'\r\n    }\r\n    else if (userData_Custom.headlineStatus === 'DEGRADED') {\r\n        deafultHeadingColor = 'yellowBackground'\r\n    }\r\n    else if (userData_Custom.headlineStatus === 'DISRUPTED') {\r\n        deafultHeadingColor = 'redBackground'\r\n    }\r\n\r\n\r\n\r\n    // Progress bar UI\r\n    const progressBarUI = userData.progressCountStatus.map(key => {\r\n        let variant;\r\n        switch (key) {\r\n            case 'DEGRADED':\r\n                variant = 'warning';\r\n                break;\r\n            case 'DISRUPTED':\r\n                variant = 'danger';\r\n                break;\r\n            case 'OPERATIONAL':\r\n                variant = 'success';\r\n                break;\r\n            case 'UNKNOWN':\r\n                variant = 'secondary';\r\n                break;\r\n            default:\r\n                variant = 'info';\r\n                break;\r\n        }\r\n        return <ProgressBar variant={variant} now={10} key={key} />;\r\n    });\r\n\r\n\r\n\r\n    const getClassNameForPages = (e, pageName) => {\r\n        if (e['comparison'] === 'G') {\r\n            if (userData_Custom[pageName]?.current > e['critical_threshold']) {\r\n                return 'red';\r\n            }\r\n            if (userData_Custom[pageName]?.current >= e['warning_threshold'] && userData_Custom[pageName]?.current < e['critical_threshold']) {\r\n                return 'yellow';\r\n            }\r\n        }\r\n\r\n        if (e['comparison'] === 'L') {\r\n            if (userData_Custom[pageName]?.current < e['critical_threshold']) {\r\n                return 'red';\r\n            }\r\n            if (userData_Custom[pageName]?.current?.current < e['warning_threshold'] && userData_Custom[pageName]?.current > e['critical_threshold']) {\r\n                return 'yellow';\r\n            }\r\n        }\r\n\r\n        return 'green';\r\n    };\r\n\r\n    const pageClassNames = (pageName) => {\r\n\r\n\r\n        return metricComparison.map(e => {\r\n            if (e['custom_metric'] === pageName || e['standard_metric'] === pageName) {\r\n                return getClassNameForPages(e, pageName);\r\n            }\r\n            return '';\r\n        }).join(' ');\r\n    };\r\n\r\n    const showToolTipsValue = (pageName) => {\r\n        for (const pageObject of metricComparison) {\r\n            if (pageObject['standard_metric'] === pageName || pageObject['custom_metric'] === pageName) {\r\n                return (\r\n                    <div>\r\n                        Warning : {pageObject.warning_threshold}\r\n                        <br />\r\n                        Critical : {pageObject.critical_threshold}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Col>\r\n            <Card style={{ maxHeight: \"100%\", marginBottom: \"1.6rem\" }} border=\"dark\">\r\n                <Card.Header className={deafultHeadingColor}>\r\n                    {cardName}\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Card.Title>\r\n                        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                            <ProgressBar style={{ width: \"60%\" }}>{progressBarUI}</ProgressBar>\r\n                            <p style={{ marginLeft: \"10px\", marginBottom: \"0px\" }}> Host Status for 3h </p>\r\n                        </div>\r\n\r\n                    </Card.Title>\r\n                    <Card.Text>\r\n                        <ListGroup variant=\"flush\">\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}> Infrastructure Health </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={faCaretUp}\r\n                                            size=\"2x\"\r\n                                            style={{ color: \"green\" }}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        {userData_Custom.status_val ? userData_Custom.status_val : 'NA'}\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>\r\n                                        <span>Response Time (sec) </span>\r\n                                    </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={userData_Custom['Response time']?.current > userData_Custom['Response time']?.prev ? faCaretUp : faCaretDown}\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Response time')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Response time')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Response time']?.current ? userData_Custom['Response time']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Synthetic Availability (%) </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Synthetic availability']?.current >=\r\n                                                    userData_Custom['Synthetic availability']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Synthetic availability')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Synthetic availability')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Synthetic availability']?.current ?\r\n                                                    userData_Custom['Synthetic availability']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Throughput  </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['End user experience']?.current > userData_Custom['End user experience']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('End user experience')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('End user experience')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['End user experience']?.current ?\r\n                                                    userData_Custom['End user experience']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Login </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={userData_Custom['Login Page']?.current >\r\n                                                userData_Custom['Login Page']?.prev\r\n                                                ? faCaretUp\r\n                                                : faCaretDown}\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Login Page')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Login Page')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Login Page']?.current ?\r\n                                                    userData_Custom['Login Page']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Menu</Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Partner Authentication']?.current > userData_Custom['Partner Authentication']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Partner Authentication')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Partner Authentication')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {\r\n                                                    userData_Custom['Partner Authentication']?.current ?\r\n                                                        userData_Custom['Partner Authentication']?.current.toFixed(2) : 'NA'\r\n                                                }\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>DOM</Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Home Page']?.current > userData_Custom['Home Page']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Home Page')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Home Page')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Home Page']?.current ?\r\n                                                    userData_Custom['Home Page']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Active Alerts </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={faCaretUp}\r\n                                            size=\"2x\"\r\n                                            className='green'\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>\r\n                                                    {\r\n                                                        <div>\r\n                                                            Warning :{\" \"}\r\n                                                            {\r\n                                                                userData_Custom?.warningAlertCount?.current &&\r\n                                                                userData_Custom?.warningAlertCount?.current.toFixed(2)\r\n                                                            }\r\n                                                            <br />\r\n                                                            Critical :{\" \"}\r\n                                                            <a\r\n                                                                target=\"_blank\"\r\n                                                                href=\"/\"\r\n                                                            >\r\n                                                                {\r\n                                                                    userData_Custom?.criticalAlertCount?.current &&\r\n                                                                    userData_Custom?.criticalAlertCount?.current.toFixed(2)\r\n                                                                }\r\n                                                            </a>\r\n                                                        </div>\r\n                                                    }\r\n                                                </Tooltip>\r\n                                            }\r\n                                        >\r\n                                            <span style={{ cursor: \"pointer\" }}>\r\n                                                {userData_Custom?.criticalAlertCount?.current !== 0 || userData_Custom?.warningAlertCount?.current !== 0 ?\r\n                                                    (\r\n                                                        userData_Custom?.criticalAlertCount?.current +\r\n                                                        userData_Custom?.warningAlertCount?.current\r\n                                                    ).toFixed(2) : \"NA\"}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        </Col>\r\n    );\r\n};\r\n\r\nexport default OCA_User;\r\n\r\n\r\n\r\n// Function to make a NerdGraph query\r\nconst fetchNerdGraphQuery = async (query) => {\r\n    const response = await NerdGraphQuery.query({ query });\r\n    return response.data;\r\n};\r\n\r\n\r\nconst getOccuranceObject = (data) => {\r\n\r\n    var statusOccurances = {};\r\n    const timesliceData = data.actor.account.nrql.rawResponse.facets;\r\n\r\n    for (var i = 0; i < timesliceData.length; i++) {\r\n        if (timesliceData[i].name == \"UNKNOWN\") {\r\n            statusOccurances[\"unknown\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"unknown\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"OPERATIONAL\") {\r\n            statusOccurances[\"operational\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"operational\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"DISRUPTED\") {\r\n            statusOccurances[\"disrupted\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"disrupted\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"DEGRADED\") {\r\n            statusOccurances[\"degraded\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"degraded\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else {\r\n            statusOccurances[\"unknown\"].push(0);\r\n            statusOccurances[\"operational\"].push(0);\r\n            statusOccurances[\"disrupted\"].push(0);\r\n            statusOccurances[\"degraded\"].push(0);\r\n        }\r\n    }\r\n\r\n    return statusOccurances\r\n}\r\n\r\nconst formatObject = (obj) => {\r\n\r\n    const keys = Object.keys(obj);\r\n\r\n    if (!keys.includes(\"unknown\")) {\r\n        obj[\"unknown\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"unknown\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"operational\")) {\r\n        obj[\"operational\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"operational\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"degraded\")) {\r\n        obj[\"degraded\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"degraded\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"disrupted\")) {\r\n        obj[\"disrupted\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"disrupted\"].push(0);\r\n        }\r\n    }\r\n\r\n    const result = [];\r\n    var output = [];\r\n    const maxLength = Math.max(\r\n        ...Object.values(obj).map((arr) => arr.length)\r\n    );\r\n\r\n    for (let i = 0; i < maxLength; i++) {\r\n        const formattedEntry = {};\r\n\r\n        for (const key in obj) {\r\n            formattedEntry[key] =\r\n                obj[key][i] !== undefined ? obj[key][i] : null;\r\n        }\r\n\r\n        result.push(formattedEntry);\r\n    }\r\n\r\n    for (var i = 0; i < result.length; i++) {\r\n        if (result[i].unknown != 0) {\r\n            output.push(\"UNKNOWN\");\r\n        } else if (result[i].degraded != 0) {\r\n            output.push(\"DEGRADED\");\r\n        } else if (result[i].disrupted != 0) {\r\n            output.push(\"DISRUPTED\");\r\n        } else {\r\n            output.push(\"OPERATIONAL\");\r\n        }\r\n    }\r\n    return output;\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Container, ListGroup, ProgressBar } from 'react-bootstrap';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\n\r\n\r\n\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n// nerdGraph\r\nimport { NerdGraphQuery } from 'nr1';\r\n\r\nconst CPQ_User = ({ cardName, timeUpdater, guid, colorSetter }) => {\r\n\r\n\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [userData, setUserData] = useState({\r\n        progressCountStatus: []\r\n    });\r\n\r\n    const [userData_Custom, setUserData_Custom] = useState({\r\n        app_name: \"\",\r\n        \"Response time\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        \"Login Page\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        'Partner Authentication': {\r\n            current: null,\r\n            prev: null,\r\n\r\n        },\r\n        \"Home Page\": {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        status_val: \"\",\r\n        \"Synthetic availability\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        \"End user experience\": {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        criticalAlertCount: {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        warningAlertCount: {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        headlineStatus: null,\r\n        progressCountStatus: []\r\n    })\r\n\r\n    const [metricComparison, setMetricCompariosn] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchUserData = async () => {\r\n\r\n            try {\r\n\r\n                const wl_guid = \"Mjc4MTY2N3xOUjF8V09SS0xPQUR8MjAzNzEy\";\r\n                let Page_url_in_key_value = {};\r\n\r\n                var entities = [];\r\n\r\n                const list_of_guids_Promise = await fetchNerdGraphQuery(`\r\n           query \r\n             {\r\n          actor {\r\n                user {\r\n                  name\r\n                }\r\n                account(id: 2781667) {\r\n                  workload {\r\n                    collection(guid: \"${wl_guid}\") {\r\n                      name\r\n                      entities {\r\n                        guid\r\n                      }\r\n                    }\r\n                  }\r\n              }\r\n          }\r\n        }\r\n        `)\r\n\r\n                const list_of_guid_result = list_of_guids_Promise.actor.account.workload.collection.entities;\r\n\r\n\r\n                //* Inserting all the guids\r\n                const list_of_guids = [];\r\n\r\n                for (var i = 0; i < list_of_guid_result.length; i++) {\r\n                    list_of_guids.push(list_of_guid_result[i].guid);\r\n                }\r\n\r\n                const entity_Info_Promise = await fetchNerdGraphQuery(`\r\n            query {\r\n              actor {\r\n                account(id: 2781667) {\r\n                  id\r\n                }\r\n                entities(guids: [${list_of_guids.map(guid => `\"${guid}\"`).join(',')}]) {\r\n                  name\r\n                  entityType\r\n                  type\r\n                }\r\n              }\r\n            }\r\n        `);\r\n\r\n                const entity_info_result = entity_Info_Promise.actor.entities\r\n\r\n                let dict = {};\r\n                dict[\"infra_workloads\"] = entity_info_result\r\n                    .filter((i) => i[\"entityType\"] === \"WORKLOAD_ENTITY\")\r\n                    .map((i) => i[\"name\"]);\r\n\r\n                dict[\"synthetic\"] = entity_info_result\r\n                    .filter((i) => i[\"entityType\"] === \"SYNTHETIC_MONITOR_ENTITY\")\r\n                    .map((i) => i[\"name\"]);\r\n\r\n\r\n\r\n                const infra_status_Promise = await fetchNerdGraphQuery(`\r\n            query {\r\n              actor {\r\n                user {\r\n                  name\r\n                }\r\n                account(id: 2781667) {\r\n                  nrql(\r\n                    query: \"FROM WorkloadStatus SELECT latest(statusValue) WHERE entity.name IN ('ServicesCPQ-PROD_Infra')\"\r\n                  ) {\r\n                    embeddedChartUrl\r\n                    nrql\r\n                    otherResult\r\n                    rawResponse\r\n                    staticChartUrl\r\n                    totalResult\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          `);\r\n\r\n                const synthetic_Promise = await fetchNerdGraphQuery(`\r\n                query {\r\n                  actor {\r\n                    user {\r\n                      name\r\n                    }\r\n                    account(id: 2781667) {\r\n                      nrql(\r\n                        query: \"FROM SyntheticCheck SELECT percentage(count(result), WHERE result='SUCCESS') WHERE monitorName IN ('209927-Hybris Services CPQ COLO-Production_Legal_Quote_Creation-HPE Employee Login') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                      ) {\r\n                        embeddedChartUrl\r\n                        nrql\r\n                        otherResult\r\n                        rawResponse\r\n                        staticChartUrl\r\n                        totalResult\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n          `);\r\n\r\n                setUserData_Custom({\r\n                    status_val: infra_status_Promise.actor.account.nrql.rawResponse.results[0].latest,\r\n                    \"Synthetic availability\": {\r\n                        current: synthetic_Promise.actor.account.nrql.rawResponse.current.results[0].result,\r\n                        prev: synthetic_Promise.actor.account.nrql.rawResponse.previous.results[0].result,\r\n                    }\r\n                })\r\n\r\n\r\n                const headlineStatusPromise = fetchNerdGraphQuery(`\r\n                  query {\r\n                    actor {\r\n                      user {\r\n                        name\r\n                      }\r\n                      account(id: 2781667) {\r\n                        nrql(\r\n                          query: \"FROM WorkloadStatus SELECT latest(statusValue) WHERE entity.name='GCC_ServiceCPQ User Journey' SINCE 5 Minutes AGO\"\r\n                        ) {\r\n                          embeddedChartUrl\r\n                          nrql\r\n                          otherResult\r\n                          rawResponse\r\n                          staticChartUrl\r\n                          totalResult\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n          `)\r\n\r\n\r\n                const criticalAlertCountPromise = fetchNerdGraphQuery(`{\r\n                  actor {\r\n                    user {\r\n                      name\r\n                    }\r\n                account(id: 2781667) {\r\n                nrql(\r\n                        query: \"SELECT count(*) from NrAiIncident where event = 'open' and priority = 'critical' and entity.name = '209927-Hybris Services CPQ COLO-Production' SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                      ) {\r\n                        embeddedChartUrl\r\n                        nrql\r\n                        otherResult\r\n                        rawResponse\r\n                        staticChartUrl\r\n                        totalResult\r\n                      } \r\n                    }\r\n                  }\r\n                }\r\n          `)\r\n\r\n                const warningAlertCountPromise = fetchNerdGraphQuery(`{\r\n                      actor {\r\n                        user {\r\n                          name\r\n                        }\r\n                    account(id: 2781667) {\r\n                    nrql(\r\n                            query: \"SELECT count(*) from NrAiIncident where event = 'open' and priority = 'warning' and entity.name = '209927-Hybris Services CPQ COLO-Production' SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                          ) {\r\n                            embeddedChartUrl\r\n                            nrql\r\n                            otherResult\r\n                            rawResponse\r\n                            staticChartUrl\r\n                            totalResult\r\n                          } \r\n                        }\r\n                      }\r\n                    }\r\n                    \r\n          `)\r\n\r\n                const theProgressCountPromise = fetchNerdGraphQuery(`{\r\n            actor {\r\n              account(id: 2781667) {\r\n                nrql(query: \"FROM WorkloadStatus SELECT count(*) SINCE 3 HOURS AGO WHERE entity.name IN ('ServicesCPQ-PROD_Infra') FACET statusValue TIMESERIES 18 MINUTES\") {\r\n                  embeddedChartUrl\r\n                  nrql\r\n                  otherResult\r\n                  rawResponse\r\n                  staticChartUrl\r\n                  totalResult\r\n                }\r\n              }\r\n            }\r\n          }`)\r\n\r\n                const fetch_arrow_color_query_Promise = fetchNerdGraphQuery(`{\r\n            actor {\r\n              account(id: 2781667) {\r\n                nrql(\r\n                  query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT standard_metric, custom_metric, warning_threshold, critical_threshold, comparison WHERE workload_name = 'PRP_Master_Workload'\"\r\n                ) {\r\n                  embeddedChartUrl\r\n                  nrql\r\n                  otherResult\r\n                  rawResponse\r\n                  staticChartUrl\r\n                  totalResult\r\n                }\r\n              }\r\n            }\r\n          }`)\r\n\r\n\r\n                const [\r\n                    criticalAlertCount,\r\n                    warningAlertCount,\r\n                    headlineStatus,\r\n                    theProgressCount,\r\n                    fetch_arrow_color_query\r\n                ] =\r\n                    await Promise.all([\r\n                        criticalAlertCountPromise,\r\n                        warningAlertCountPromise,\r\n                        headlineStatusPromise,\r\n                        theProgressCountPromise,\r\n                        fetch_arrow_color_query_Promise\r\n                    ])\r\n\r\n                setMetricCompariosn(fetch_arrow_color_query.actor.account.nrql.rawResponse.results[0].events)\r\n\r\n                let progressCountOccurance = getOccuranceObject(theProgressCount)\r\n                let progressCount = formatObject(progressCountOccurance)\r\n\r\n                setUserData({\r\n                    progressCountStatus: progressCount\r\n                });\r\n\r\n\r\n\r\n                // Fetching app name\r\n                const fetch_App_name = await fetch_App_name_Promise;\r\n                const appName = await fetch_App_name.actor.account.nrql.rawResponse.results[0].members[0];\r\n\r\n                // Fetching end user performance using the obtained app name\r\n                const fetch_user_performance = await fetch_throughput(appName);\r\n                //pagename and url in ket value pair\r\n                const fetch_url_pagename = await fetch_URI_name_Promise;\r\n\r\n\r\n                //separte page:urls\r\n                fetch_url_pagename.actor.account.nrql.rawResponse.facets.forEach(\r\n                    (e) => Page_url_in_key_value[e.name[0]] = e.name[1]\r\n                );\r\n\r\n\r\n                const [\r\n                    fetch_response_time,\r\n                    fetch_login_custom,\r\n                    fetch_Partner_custom,\r\n                    fetch_HomePage_custom\r\n                ] =\r\n                    await Promise.all([\r\n                        fetch_response_time_Promise(appName),\r\n                        fetch_custom_1(appName, Page_url_in_key_value['Login Page']),\r\n                        fetch_custom_2(appName, Page_url_in_key_value['Partner Authentication']),\r\n                        fetch_custom_3(appName, Page_url_in_key_value['Home Page'])\r\n                    ])\r\n\r\n                setUserData_Custom(prevState => ({\r\n                    ...prevState,\r\n                    app_name: appName,\r\n                    \"Response time\": {\r\n                        current: fetch_response_time.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_response_time.actor.account.nrql.rawResponse.previous.results[0].average,\r\n                    },\r\n                    'Login Page': {\r\n                        current: fetch_login_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_login_custom.actor.account.nrql.rawResponse.previous.results[0].average,\r\n                    },\r\n                    'Partner Authentication': {\r\n                        current: fetch_Partner_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_Partner_custom.actor.account.nrql.rawResponse.previous.results[0].average\r\n                    },\r\n                    \"Home Page\": {\r\n                        current: fetch_HomePage_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_HomePage_custom.actor.account.nrql.rawResponse.previous.results[0].average\r\n                    },\r\n                    'End user experience': {\r\n                        current: fetch_user_performance.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: fetch_user_performance.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                    headlineStatus: headlineStatus.actor.account.nrql.rawResponse.results[0].latest,\r\n                    progressCountStatus: progressCount,\r\n                    criticalAlertCount: {\r\n                        current: criticalAlertCount.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: criticalAlertCount.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                    warningAlertCount: {\r\n                        current: warningAlertCount.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: warningAlertCount.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                }))\r\n                setLoading(false);\r\n            } catch (error) {\r\n                alert(error)\r\n                console.error('Error fetching user data:', error);\r\n                setError(error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchUserData();\r\n\r\n    }, [timeUpdater]);\r\n\r\n\r\n    //* query for appName\r\n    const fetch_App_name_Promise = fetchNerdGraphQuery(`{\r\n      actor {\r\n        account(id: 2781667) {\r\n          nrql(query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT uniques(app_name) WHERE workload_name = 'PRP_Master_Workload' SINCE 7 DAYS AGO\") {\r\n            embeddedChartUrl\r\n            nrql\r\n            otherResult\r\n            rawResponse\r\n            staticChartUrl\r\n            totalResult\r\n          }\r\n        }\r\n      }\r\n    }`);\r\n\r\n\r\n    /**\r\n     * * End user performance\r\n     * @appName : 210135-Partner Ready Portal (PRP)-Production\r\n     * */\r\n\r\n    const fetch_throughput = async (appName) => {\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT count(*) WHERE appName = '209927-Hybris Services CPQ COLO-Production' SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n        }`);\r\n\r\n            return response;\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    // Query for uri's\r\n    const fetch_URI_name_Promise = fetchNerdGraphQuery(`{\r\n        actor {\r\n          account(id: 2781667) {\r\n            nrql(query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT count(*) WHERE workload_name = 'PRP_Master_Workload' AND request_uri != 'NA' AND request_uri != 'custom_uri' FACET custom_metric, request_uri SINCE 7 DAYS AGO\") {\r\n              embeddedChartUrl\r\n              nrql\r\n              otherResult\r\n              rawResponse\r\n              staticChartUrl\r\n              totalResult\r\n            }\r\n          }\r\n        }\r\n      }`);\r\n\r\n    //Response time\r\n    const fetch_response_time_Promise = async (appName) => {\r\n\r\n        //* dynamic appName \r\n        try {\r\n            let response_Time_Promise = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName = '209927-Hybris Services CPQ COLO-Production' SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n        }`);\r\n            return response_Time_Promise\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    /**\r\n      * * Login_cust | Partnerauth_cust | Homepage_cust\r\n      * @dynamicURI : /web/prp/login | /group/prp | /group/prp/home\r\n      * @appName : : 210135-Partner Ready Portal (PRP)-Production\r\n      */\r\n\r\n    const fetch_custom_1 = async (appName, dynamicURI) => {\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName = '209927-Hybris Services CPQ COLO-Production' AND request.uri IN ('/servicesCPQ/login/selection') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    const fetch_custom_2 = async (appName, dynamicURI) => {\r\n\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName = '209927-Hybris Services CPQ COLO-Production' AND request.uri IN ('/servicesCPQ/account/searchAccount') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    const fetch_custom_3 = async (appName, dynamicURI) => {\r\n\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"from Transaction select average(duration) where appName in ('209927-Hybris Services CPQ COLO-Production') and ( request.uri like '%/en/byo/getByoPage' or request.uri like '%/en/byo/getConfiguration' or request.uri like '%/en/eligibility/gisEligibilityValidateMultipleConfiguration' OR request.uri LIKE '%/en/byo/getByoPage' or request.uri like '/servicesCPQ/US/en/quotes/add/addProductsToQuote' or request.uri like '%/authorizationserver/oauth/token' or request.uri like '%/en/byo/getByoPage' or request.uri like '%/hpeintegrations/validateProductProgress/getVAlidationStatus'or request.uri like '%/en/hpeServicesQuote/show/%'or request.uri like '%/servicesCPQ/getCountryLanguageData' or request.uri like '%/en/hpeServicesQuote/getBRTValues%' or request.uri like '%/servicesCPQ/getCountryData' or request.uri like '%/en/quotes/addLineItemsToQuote' OR request.uri LIKE '%/en/byo/getByoPage') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n\r\n    let deafultHeadingColor = 'grayBackground'\r\n\r\n    if (userData_Custom.headlineStatus === 'OPERATIONAL') {\r\n        deafultHeadingColor = 'lightGreenBackground'\r\n    }\r\n    else if (userData_Custom.headlineStatus === 'DEGRADED') {\r\n        deafultHeadingColor = 'yellowBackground'\r\n    }\r\n    else if (userData_Custom.headlineStatus === 'DISRUPTED') {\r\n        deafultHeadingColor = 'redBackground'\r\n    }\r\n\r\n\r\n\r\n    // Progress bar UI\r\n    const progressBarUI = userData.progressCountStatus.map(key => {\r\n        let variant;\r\n        switch (key) {\r\n            case 'DEGRADED':\r\n                variant = 'warning';\r\n                break;\r\n            case 'DISRUPTED':\r\n                variant = 'danger';\r\n                break;\r\n            case 'OPERATIONAL':\r\n                variant = 'success';\r\n                break;\r\n            case 'UNKNOWN':\r\n                variant = 'secondary';\r\n                break;\r\n            default:\r\n                variant = 'info';\r\n                break;\r\n        }\r\n        return <ProgressBar variant={variant} now={10} key={key} />;\r\n    });\r\n\r\n\r\n\r\n    const getClassNameForPages = (e, pageName) => {\r\n        if (e['comparison'] === 'G') {\r\n            if (userData_Custom[pageName]?.current > e['critical_threshold']) {\r\n                return 'red';\r\n            }\r\n            if (userData_Custom[pageName]?.current >= e['warning_threshold'] && userData_Custom[pageName]?.current < e['critical_threshold']) {\r\n                return 'yellow';\r\n            }\r\n        }\r\n\r\n        if (e['comparison'] === 'L') {\r\n            if (userData_Custom[pageName]?.current < e['critical_threshold']) {\r\n                return 'red';\r\n            }\r\n            if (userData_Custom[pageName]?.current?.current < e['warning_threshold'] && userData_Custom[pageName]?.current > e['critical_threshold']) {\r\n                return 'yellow';\r\n            }\r\n        }\r\n\r\n        return 'green';\r\n    };\r\n\r\n    const pageClassNames = (pageName) => {\r\n\r\n\r\n        return metricComparison.map(e => {\r\n            if (e['custom_metric'] === pageName || e['standard_metric'] === pageName) {\r\n                return getClassNameForPages(e, pageName);\r\n            }\r\n            return '';\r\n        }).join(' ');\r\n    };\r\n\r\n    const showToolTipsValue = (pageName) => {\r\n        for (const pageObject of metricComparison) {\r\n            if (pageObject['standard_metric'] === pageName || pageObject['custom_metric'] === pageName) {\r\n                return (\r\n                    <div>\r\n                        Warning : {pageObject.warning_threshold}\r\n                        <br />\r\n                        Critical : {pageObject.critical_threshold}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Col>\r\n            <Card style={{ maxHeight: \"100%\", marginBottom: \"1.6rem\" }} border=\"dark\">\r\n                <Card.Header className={deafultHeadingColor}>\r\n                    {cardName}\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Card.Title>\r\n                        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                            <ProgressBar style={{ width: \"60%\" }}>{progressBarUI}</ProgressBar>\r\n                            <p style={{ marginLeft: \"10px\", marginBottom: \"0px\" }}> Host Status for 3h </p>\r\n                        </div>\r\n\r\n                    </Card.Title>\r\n                    <Card.Text>\r\n                        <ListGroup variant=\"flush\">\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}> Infrastructure Health </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={faCaretUp}\r\n                                            size=\"2x\"\r\n                                            style={{ color: \"green\" }}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        {userData_Custom.status_val ? userData_Custom.status_val : 'NA'}\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>\r\n                                        <span>Response Time (sec) </span>\r\n                                    </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={userData_Custom['Response time']?.current > userData_Custom['Response time']?.prev ? faCaretUp : faCaretDown}\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Response time')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Response time')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Response time']?.current ? userData_Custom['Response time']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Synthetic Availability (%) </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Synthetic availability']?.current >=\r\n                                                    userData_Custom['Synthetic availability']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Synthetic availability')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Synthetic availability')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Synthetic availability']?.current ?\r\n                                                    userData_Custom['Synthetic availability']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Throughput  </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['End user experience']?.current > userData_Custom['End user experience']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('End user experience')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('End user experience')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['End user experience']?.current ?\r\n                                                    userData_Custom['End user experience']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Login </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={userData_Custom['Login Page']?.current >\r\n                                                userData_Custom['Login Page']?.prev\r\n                                                ? faCaretUp\r\n                                                : faCaretDown}\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Login Page')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Login Page')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Login Page']?.current ?\r\n                                                    userData_Custom['Login Page']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Start Quote</Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Partner Authentication']?.current > userData_Custom['Partner Authentication']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Partner Authentication')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Partner Authentication')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {\r\n                                                    userData_Custom['Partner Authentication']?.current ?\r\n                                                        userData_Custom['Partner Authentication']?.current.toFixed(2) : 'NA'\r\n                                                }\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>ADD Service</Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Home Page']?.current > userData_Custom['Home Page']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Home Page')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Home Page')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Home Page']?.current ?\r\n                                                    userData_Custom['Home Page']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Active Alerts </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={faCaretUp}\r\n                                            size=\"2x\"\r\n                                            className='green'\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>\r\n                                                    {\r\n                                                        <div>\r\n                                                            Warning :{\" \"}\r\n                                                            {\r\n                                                                userData_Custom?.warningAlertCount?.current &&\r\n                                                                userData_Custom?.warningAlertCount?.current.toFixed(2)\r\n                                                            }\r\n                                                            <br />\r\n                                                            Critical :{\" \"}\r\n                                                            <a\r\n                                                                target=\"_blank\"\r\n                                                                href=\"/\"\r\n                                                            >\r\n                                                                {\r\n                                                                    userData_Custom?.criticalAlertCount?.current &&\r\n                                                                    userData_Custom?.criticalAlertCount?.current.toFixed(2)\r\n                                                                }\r\n                                                            </a>\r\n                                                        </div>\r\n                                                    }\r\n                                                </Tooltip>\r\n                                            }\r\n                                        >\r\n                                            <span style={{ cursor: \"pointer\" }}>\r\n                                                {userData_Custom?.criticalAlertCount?.current !== 0 || userData_Custom?.warningAlertCount?.current !== 0 ?\r\n                                                    (\r\n                                                        userData_Custom?.criticalAlertCount?.current +\r\n                                                        userData_Custom?.warningAlertCount?.current\r\n                                                    ).toFixed(2) : \"NA\"}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        </Col>\r\n    );\r\n};\r\n\r\nexport default CPQ_User;\r\n\r\n\r\n\r\n// Function to make a NerdGraph query\r\nconst fetchNerdGraphQuery = async (query) => {\r\n    const response = await NerdGraphQuery.query({ query });\r\n    return response.data;\r\n};\r\n\r\n\r\nconst getOccuranceObject = (data) => {\r\n\r\n    var statusOccurances = {};\r\n    const timesliceData = data.actor.account.nrql.rawResponse.facets;\r\n\r\n    for (var i = 0; i < timesliceData.length; i++) {\r\n        if (timesliceData[i].name == \"UNKNOWN\") {\r\n            statusOccurances[\"unknown\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"unknown\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"OPERATIONAL\") {\r\n            statusOccurances[\"operational\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"operational\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"DISRUPTED\") {\r\n            statusOccurances[\"disrupted\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"disrupted\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"DEGRADED\") {\r\n            statusOccurances[\"degraded\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"degraded\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else {\r\n            statusOccurances[\"unknown\"].push(0);\r\n            statusOccurances[\"operational\"].push(0);\r\n            statusOccurances[\"disrupted\"].push(0);\r\n            statusOccurances[\"degraded\"].push(0);\r\n        }\r\n    }\r\n\r\n    return statusOccurances\r\n}\r\n\r\nconst formatObject = (obj) => {\r\n\r\n    const keys = Object.keys(obj);\r\n\r\n    if (!keys.includes(\"unknown\")) {\r\n        obj[\"unknown\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"unknown\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"operational\")) {\r\n        obj[\"operational\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"operational\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"degraded\")) {\r\n        obj[\"degraded\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"degraded\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"disrupted\")) {\r\n        obj[\"disrupted\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"disrupted\"].push(0);\r\n        }\r\n    }\r\n\r\n    const result = [];\r\n    var output = [];\r\n    const maxLength = Math.max(\r\n        ...Object.values(obj).map((arr) => arr.length)\r\n    );\r\n\r\n    for (let i = 0; i < maxLength; i++) {\r\n        const formattedEntry = {};\r\n\r\n        for (const key in obj) {\r\n            formattedEntry[key] =\r\n                obj[key][i] !== undefined ? obj[key][i] : null;\r\n        }\r\n\r\n        result.push(formattedEntry);\r\n    }\r\n\r\n    for (var i = 0; i < result.length; i++) {\r\n        if (result[i].unknown != 0) {\r\n            output.push(\"UNKNOWN\");\r\n        } else if (result[i].degraded != 0) {\r\n            output.push(\"DEGRADED\");\r\n        } else if (result[i].disrupted != 0) {\r\n            output.push(\"DISRUPTED\");\r\n        } else {\r\n            output.push(\"OPERATIONAL\");\r\n        }\r\n    }\r\n    return output;\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Container, ListGroup, ProgressBar } from 'react-bootstrap';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\n\r\n\r\n\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n// nerdGraph\r\nimport { NerdGraphQuery } from 'nr1';\r\n\r\nconst OSV = ({ cardName, timeUpdater, guid, colorSetter }) => {\r\n\r\n\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [userData, setUserData] = useState({\r\n        progressCountStatus: []\r\n    });\r\n\r\n    const [userData_Custom, setUserData_Custom] = useState({\r\n        app_name: \"\",\r\n        \"Response time\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        \"Login Page\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        'Partner Authentication': {\r\n            current: null,\r\n            prev: null,\r\n\r\n        },\r\n        \"Home Page\": {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        status_val: \"\",\r\n        \"Synthetic availability\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        \"End user experience\": {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        criticalAlertCount: {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        warningAlertCount: {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        headlineStatus: null,\r\n        progressCountStatus: []\r\n    })\r\n\r\n    const [metricComparison, setMetricCompariosn] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchUserData = async () => {\r\n\r\n            try {\r\n\r\n                const wl_guid = \"Mjc4MTY2N3xOUjF8V09SS0xPQUR8MjAzNzEy\";\r\n                let Page_url_in_key_value = {};\r\n\r\n                var entities = [];\r\n\r\n                const list_of_guids_Promise = await fetchNerdGraphQuery(`\r\n           query \r\n             {\r\n          actor {\r\n                user {\r\n                  name\r\n                }\r\n                account(id: 2781667) {\r\n                  workload {\r\n                    collection(guid: \"${wl_guid}\") {\r\n                      name\r\n                      entities {\r\n                        guid\r\n                      }\r\n                    }\r\n                  }\r\n              }\r\n          }\r\n        }\r\n        `)\r\n\r\n                const list_of_guid_result = list_of_guids_Promise.actor.account.workload.collection.entities;\r\n\r\n\r\n                //* Inserting all the guids\r\n                const list_of_guids = [];\r\n\r\n                for (var i = 0; i < list_of_guid_result.length; i++) {\r\n                    list_of_guids.push(list_of_guid_result[i].guid);\r\n                }\r\n\r\n                const entity_Info_Promise = await fetchNerdGraphQuery(`\r\n            query {\r\n              actor {\r\n                account(id: 2781667) {\r\n                  id\r\n                }\r\n                entities(guids: [${list_of_guids.map(guid => `\"${guid}\"`).join(',')}]) {\r\n                  name\r\n                  entityType\r\n                  type\r\n                }\r\n              }\r\n            }\r\n        `);\r\n\r\n                const entity_info_result = entity_Info_Promise.actor.entities\r\n\r\n                let dict = {};\r\n                dict[\"infra_workloads\"] = entity_info_result\r\n                    .filter((i) => i[\"entityType\"] === \"WORKLOAD_ENTITY\")\r\n                    .map((i) => i[\"name\"]);\r\n\r\n                dict[\"synthetic\"] = entity_info_result\r\n                    .filter((i) => i[\"entityType\"] === \"SYNTHETIC_MONITOR_ENTITY\")\r\n                    .map((i) => i[\"name\"]);\r\n\r\n\r\n\r\n                const infra_status_Promise = await fetchNerdGraphQuery(`\r\n            query {\r\n              actor {\r\n                user {\r\n                  name\r\n                }\r\n                account(id: 2781667) {\r\n                  nrql(\r\n                    query: \"FROM WorkloadStatus SELECT latest(statusValue) WHERE entity.name IN ('OSV-PROD_Infra')\"\r\n                  ) {\r\n                    embeddedChartUrl\r\n                    nrql\r\n                    otherResult\r\n                    rawResponse\r\n                    staticChartUrl\r\n                    totalResult\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          `);\r\n\r\n                const synthetic_Promise = await fetchNerdGraphQuery(`\r\n                query {\r\n                  actor {\r\n                    user {\r\n                      name\r\n                    }\r\n                    account(id: 2781667) {\r\n                      nrql(\r\n                        query: \"FROM SyntheticCheck SELECT percentage(count(result), WHERE result='SUCCESS') WHERE monitorName IN ('210135-Partner Ready Portal(PRP)-Production(OSV User Journey)-Order Detail','210135-Partner Ready Portal(PRP)-Production(OSV User Journey)-Order Search','210135-Partner Ready Portal(PRP)-Production(OSV User Journey)-Reports') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                      ) {\r\n                        embeddedChartUrl\r\n                        nrql\r\n                        otherResult\r\n                        rawResponse\r\n                        staticChartUrl\r\n                        totalResult\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n          `);\r\n\r\n                setUserData_Custom({\r\n                    status_val: infra_status_Promise.actor.account.nrql.rawResponse.results[0].latest,\r\n                    \"Synthetic availability\": {\r\n                        current: synthetic_Promise.actor.account.nrql.rawResponse.current.results[0].result,\r\n                        prev: synthetic_Promise.actor.account.nrql.rawResponse.previous.results[0].result,\r\n                    }\r\n                })\r\n\r\n\r\n                const headlineStatusPromise = fetchNerdGraphQuery(`\r\n                  query {\r\n                    actor {\r\n                      user {\r\n                        name\r\n                      }\r\n                      account(id: 2781667) {\r\n                        nrql(\r\n                          query: \"FROM WorkloadStatus SELECT latest(statusValue) WHERE entity.name='GCC_OSV User Journey' SINCE 5 Minutes AGO\"\r\n                        ) {\r\n                          embeddedChartUrl\r\n                          nrql\r\n                          otherResult\r\n                          rawResponse\r\n                          staticChartUrl\r\n                          totalResult\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n          `)\r\n\r\n\r\n                const criticalAlertCountPromise = fetchNerdGraphQuery(`{\r\n                  actor {\r\n                    user {\r\n                      name\r\n                    }\r\n                account(id: 2781667) {\r\n                nrql(\r\n                        query: \"SELECT count(*) from NrAiIncident where event = 'open' and priority = 'critical' and entity.name IN ('210135-Partner Ready Portal (PRP)-Production','211240-ADDISON-Production-order-services') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                      ) {\r\n                        embeddedChartUrl\r\n                        nrql\r\n                        otherResult\r\n                        rawResponse\r\n                        staticChartUrl\r\n                        totalResult\r\n                      } \r\n                    }\r\n                  }\r\n                }\r\n          `)\r\n\r\n                const warningAlertCountPromise = fetchNerdGraphQuery(`{\r\n                      actor {\r\n                        user {\r\n                          name\r\n                        }\r\n                    account(id: 2781667) {\r\n                    nrql(\r\n                            query: \"SELECT count(*) from NrAiIncident where event = 'open' and priority = 'warning' and entity.name IN ('210135-Partner Ready Portal (PRP)-Production','211240-ADDISON-Production-order-services') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                          ) {\r\n                            embeddedChartUrl\r\n                            nrql\r\n                            otherResult\r\n                            rawResponse\r\n                            staticChartUrl\r\n                            totalResult\r\n                          } \r\n                        }\r\n                      }\r\n                    }\r\n                    \r\n          `)\r\n\r\n                const theProgressCountPromise = fetchNerdGraphQuery(`{\r\n            actor {\r\n              account(id: 2781667) {\r\n                nrql(query: \"FROM WorkloadStatus SELECT count(*) SINCE 3 HOURS AGO WHERE entity.name IN ('OSV-PROD_Infra') FACET statusValue TIMESERIES 18 MINUTES\") {\r\n                  embeddedChartUrl\r\n                  nrql\r\n                  otherResult\r\n                  rawResponse\r\n                  staticChartUrl\r\n                  totalResult\r\n                }\r\n              }\r\n            }\r\n          }`)\r\n\r\n                const fetch_arrow_color_query_Promise = fetchNerdGraphQuery(`{\r\n            actor {\r\n              account(id: 2781667) {\r\n                nrql(\r\n                  query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT standard_metric, custom_metric, warning_threshold, critical_threshold, comparison WHERE workload_name = 'PRP_Master_Workload'\"\r\n                ) {\r\n                  embeddedChartUrl\r\n                  nrql\r\n                  otherResult\r\n                  rawResponse\r\n                  staticChartUrl\r\n                  totalResult\r\n                }\r\n              }\r\n            }\r\n          }`)\r\n\r\n\r\n                const [\r\n                    criticalAlertCount,\r\n                    warningAlertCount,\r\n                    headlineStatus,\r\n                    theProgressCount,\r\n                    fetch_arrow_color_query\r\n                ] =\r\n                    await Promise.all([\r\n                        criticalAlertCountPromise,\r\n                        warningAlertCountPromise,\r\n                        headlineStatusPromise,\r\n                        theProgressCountPromise,\r\n                        fetch_arrow_color_query_Promise\r\n                    ])\r\n\r\n                setMetricCompariosn(fetch_arrow_color_query.actor.account.nrql.rawResponse.results[0].events)\r\n\r\n                let progressCountOccurance = getOccuranceObject(theProgressCount)\r\n                let progressCount = formatObject(progressCountOccurance)\r\n\r\n                setUserData({\r\n                    progressCountStatus: progressCount\r\n                });\r\n\r\n\r\n\r\n                // Fetching app name\r\n                const fetch_App_name = await fetch_App_name_Promise;\r\n                const appName = await fetch_App_name.actor.account.nrql.rawResponse.results[0].members[0];\r\n\r\n                // Fetching end user performance using the obtained app name\r\n                const fetch_user_performance = await fetch_throughput(appName);\r\n                //pagename and url in ket value pair\r\n                const fetch_url_pagename = await fetch_URI_name_Promise;\r\n\r\n\r\n                //separte page:urls\r\n                fetch_url_pagename.actor.account.nrql.rawResponse.facets.forEach(\r\n                    (e) => Page_url_in_key_value[e.name[0]] = e.name[1]\r\n                );\r\n\r\n\r\n                const [\r\n                    fetch_response_time,\r\n                    fetch_login_custom,\r\n                    fetch_Partner_custom,\r\n                    fetch_HomePage_custom\r\n                ] =\r\n                    await Promise.all([\r\n                        fetch_response_time_Promise(appName),\r\n                        fetch_custom_1(appName, Page_url_in_key_value['Login Page']),\r\n                        fetch_custom_2(appName, Page_url_in_key_value['Partner Authentication']),\r\n                        fetch_custom_3(appName, Page_url_in_key_value['Home Page'])\r\n                    ])\r\n\r\n                setUserData_Custom(prevState => ({\r\n                    ...prevState,\r\n                    app_name: appName,\r\n                    \"Response time\": {\r\n                        current: fetch_response_time.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_response_time.actor.account.nrql.rawResponse.previous.results[0].average,\r\n                    },\r\n                    'Login Page': {\r\n                        current: fetch_login_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_login_custom.actor.account.nrql.rawResponse.previous.results[0].average,\r\n                    },\r\n                    'Partner Authentication': {\r\n                        current: fetch_Partner_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_Partner_custom.actor.account.nrql.rawResponse.previous.results[0].average\r\n                    },\r\n                    \"Home Page\": {\r\n                        current: fetch_HomePage_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_HomePage_custom.actor.account.nrql.rawResponse.previous.results[0].average\r\n                    },\r\n                    'End user experience': {\r\n                        current: fetch_user_performance.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: fetch_user_performance.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                    headlineStatus: headlineStatus.actor.account.nrql.rawResponse.results[0].latest,\r\n                    progressCountStatus: progressCount,\r\n                    criticalAlertCount: {\r\n                        current: criticalAlertCount.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: criticalAlertCount.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                    warningAlertCount: {\r\n                        current: warningAlertCount.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: warningAlertCount.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                }))\r\n                setLoading(false);\r\n            } catch (error) {\r\n                alert(error)\r\n                console.error('Error fetching user data:', error);\r\n                setError(error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchUserData();\r\n\r\n    }, [timeUpdater]);\r\n\r\n\r\n    //* query for appName\r\n    const fetch_App_name_Promise = fetchNerdGraphQuery(`{\r\n      actor {\r\n        account(id: 2781667) {\r\n          nrql(query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT uniques(app_name) WHERE workload_name = 'PRP_Master_Workload' SINCE 7 DAYS AGO\") {\r\n            embeddedChartUrl\r\n            nrql\r\n            otherResult\r\n            rawResponse\r\n            staticChartUrl\r\n            totalResult\r\n          }\r\n        }\r\n      }\r\n    }`);\r\n\r\n\r\n    /**\r\n     * * End user performance\r\n     * @appName : 210135-Partner Ready Portal (PRP)-Production\r\n     * */\r\n\r\n    const fetch_throughput = async (appName) => {\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT count(*) WHERE appName = '209927-Hybris Services CPQ COLO-Production' SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n        }`);\r\n\r\n            return response;\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    // Query for uri's\r\n    const fetch_URI_name_Promise = fetchNerdGraphQuery(`{\r\n        actor {\r\n          account(id: 2781667) {\r\n            nrql(query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT count(*) WHERE workload_name = 'PRP_Master_Workload' AND request_uri != 'NA' AND request_uri != 'custom_uri' FACET custom_metric, request_uri SINCE 7 DAYS AGO\") {\r\n              embeddedChartUrl\r\n              nrql\r\n              otherResult\r\n              rawResponse\r\n              staticChartUrl\r\n              totalResult\r\n            }\r\n          }\r\n        }\r\n      }`);\r\n\r\n    //Response time\r\n    const fetch_response_time_Promise = async (appName) => {\r\n\r\n        //* dynamic appName \r\n        try {\r\n            let response_Time_Promise = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName IN ('210135-Partner Ready Portal (PRP)-Production','211240-ADDISON-Production-order-services') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n        }`);\r\n            return response_Time_Promise\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    /**\r\n      * * Login_cust | Partnerauth_cust | Homepage_cust\r\n      * @dynamicURI : /web/prp/login | /group/prp | /group/prp/home\r\n      * @appName : : 210135-Partner Ready Portal (PRP)-Production\r\n      */\r\n\r\n    const fetch_custom_1 = async (appName, dynamicURI) => {\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName IN ('210135-Partner Ready Portal (PRP)-Production','211240-ADDISON-Production-order-services') AND (request.uri LIKE '%/login' OR request.uri LIKE '%/group/prp' OR request.uri LIKE '%/group/prp/home%') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    const fetch_custom_2 = async (appName, dynamicURI) => {\r\n\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName IN ('210135-Partner Ready Portal (PRP)-Production','211240-ADDISON-Production-order-services') AND  request.uri LIKE '%get-data-set' SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    const fetch_custom_3 = async (appName, dynamicURI) => {\r\n\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"from Transaction select average(duration) where appName in ('210135-Partner Ready Portal (PRP)-Production','211240-ADDISON-Production-order-services') and request.uri like'%/get-osvpop-data' SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n\r\n    let deafultHeadingColor = 'grayBackground'\r\n\r\n    if (userData_Custom.headlineStatus === 'OPERATIONAL') {\r\n        deafultHeadingColor = 'lightGreenBackground'\r\n    }\r\n    else if (userData_Custom.headlineStatus === 'DEGRADED') {\r\n        deafultHeadingColor = 'yellowBackground'\r\n    }\r\n    else if (userData_Custom.headlineStatus === 'DISRUPTED') {\r\n        deafultHeadingColor = 'redBackground'\r\n    }\r\n\r\n\r\n\r\n    // Progress bar UI\r\n    const progressBarUI = userData.progressCountStatus.map(key => {\r\n        let variant;\r\n        switch (key) {\r\n            case 'DEGRADED':\r\n                variant = 'warning';\r\n                break;\r\n            case 'DISRUPTED':\r\n                variant = 'danger';\r\n                break;\r\n            case 'OPERATIONAL':\r\n                variant = 'success';\r\n                break;\r\n            case 'UNKNOWN':\r\n                variant = 'secondary';\r\n                break;\r\n            default:\r\n                variant = 'info';\r\n                break;\r\n        }\r\n        return <ProgressBar variant={variant} now={10} key={key} />;\r\n    });\r\n\r\n\r\n\r\n    const getClassNameForPages = (e, pageName) => {\r\n        if (e['comparison'] === 'G') {\r\n            if (userData_Custom[pageName]?.current > e['critical_threshold']) {\r\n                return 'red';\r\n            }\r\n            if (userData_Custom[pageName]?.current >= e['warning_threshold'] && userData_Custom[pageName]?.current < e['critical_threshold']) {\r\n                return 'yellow';\r\n            }\r\n        }\r\n\r\n        if (e['comparison'] === 'L') {\r\n            if (userData_Custom[pageName]?.current < e['critical_threshold']) {\r\n                return 'red';\r\n            }\r\n            if (userData_Custom[pageName]?.current?.current < e['warning_threshold'] && userData_Custom[pageName]?.current > e['critical_threshold']) {\r\n                return 'yellow';\r\n            }\r\n        }\r\n\r\n        return 'green';\r\n    };\r\n\r\n    const pageClassNames = (pageName) => {\r\n\r\n\r\n        return metricComparison.map(e => {\r\n            if (e['custom_metric'] === pageName || e['standard_metric'] === pageName) {\r\n                return getClassNameForPages(e, pageName);\r\n            }\r\n            return '';\r\n        }).join(' ');\r\n    };\r\n\r\n    const showToolTipsValue = (pageName) => {\r\n        for (const pageObject of metricComparison) {\r\n            if (pageObject['standard_metric'] === pageName || pageObject['custom_metric'] === pageName) {\r\n                return (\r\n                    <div>\r\n                        Warning : {pageObject.warning_threshold}\r\n                        <br />\r\n                        Critical : {pageObject.critical_threshold}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Col>\r\n            <Card style={{ maxHeight: \"100%\", marginBottom: \"1.6rem\" }} border=\"dark\">\r\n                <Card.Header className={deafultHeadingColor}>\r\n                    {cardName}\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Card.Title>\r\n                        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                            <ProgressBar style={{ width: \"60%\" }}>{progressBarUI}</ProgressBar>\r\n                            <p style={{ marginLeft: \"10px\", marginBottom: \"0px\" }}> Host Status for 3h </p>\r\n                        </div>\r\n\r\n                    </Card.Title>\r\n                    <Card.Text>\r\n                        <ListGroup variant=\"flush\">\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}> Infrastructure Health </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={faCaretUp}\r\n                                            size=\"2x\"\r\n                                            style={{ color: \"green\" }}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        {userData_Custom.status_val ? userData_Custom.status_val : 'NA'}\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>\r\n                                        <span>Response Time (sec) </span>\r\n                                    </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={userData_Custom['Response time']?.current > userData_Custom['Response time']?.prev ? faCaretUp : faCaretDown}\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Response time')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Response time')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Response time']?.current ? userData_Custom['Response time']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Synthetic Availability (%) </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Synthetic availability']?.current >=\r\n                                                    userData_Custom['Synthetic availability']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Synthetic availability')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Synthetic availability')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Synthetic availability']?.current ?\r\n                                                    userData_Custom['Synthetic availability']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Throughput  </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['End user experience']?.current > userData_Custom['End user experience']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('End user experience')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('End user experience')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['End user experience']?.current ?\r\n                                                    userData_Custom['End user experience']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Login </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={userData_Custom['Login Page']?.current >\r\n                                                userData_Custom['Login Page']?.prev\r\n                                                ? faCaretUp\r\n                                                : faCaretDown}\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Login Page')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Login Page')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Login Page']?.current ?\r\n                                                    userData_Custom['Login Page']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Landing Page</Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Partner Authentication']?.current > userData_Custom['Partner Authentication']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Partner Authentication')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Partner Authentication')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {\r\n                                                    userData_Custom['Partner Authentication']?.current ?\r\n                                                        userData_Custom['Partner Authentication']?.current.toFixed(2) : 'NA'\r\n                                                }\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Order Details</Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Home Page']?.current > userData_Custom['Home Page']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Home Page')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Home Page')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Home Page']?.current ?\r\n                                                    userData_Custom['Home Page']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Active Alerts </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={faCaretUp}\r\n                                            size=\"2x\"\r\n                                            className='green'\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>\r\n                                                    {\r\n                                                        <div>\r\n                                                            Warning :{\" \"}\r\n                                                            {\r\n                                                                userData_Custom?.warningAlertCount?.current &&\r\n                                                                userData_Custom?.warningAlertCount?.current.toFixed(2)\r\n                                                            }\r\n                                                            <br />\r\n                                                            Critical :{\" \"}\r\n                                                            <a\r\n                                                                target=\"_blank\"\r\n                                                                href=\"/\"\r\n                                                            >\r\n                                                                {\r\n                                                                    userData_Custom?.criticalAlertCount?.current &&\r\n                                                                    userData_Custom?.criticalAlertCount?.current.toFixed(2)\r\n                                                                }\r\n                                                            </a>\r\n                                                        </div>\r\n                                                    }\r\n                                                </Tooltip>\r\n                                            }\r\n                                        >\r\n                                            <span style={{ cursor: \"pointer\" }}>\r\n                                                {userData_Custom?.criticalAlertCount?.current !== 0 || userData_Custom?.warningAlertCount?.current !== 0 ?\r\n                                                    (\r\n                                                        userData_Custom?.criticalAlertCount?.current +\r\n                                                        userData_Custom?.warningAlertCount?.current\r\n                                                    ).toFixed(2) : \"NA\"}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        </Col>\r\n    );\r\n};\r\n\r\nexport default OSV;\r\n\r\n\r\n\r\n// Function to make a NerdGraph query\r\nconst fetchNerdGraphQuery = async (query) => {\r\n    const response = await NerdGraphQuery.query({ query });\r\n    return response.data;\r\n};\r\n\r\n\r\nconst getOccuranceObject = (data) => {\r\n\r\n    var statusOccurances = {};\r\n    const timesliceData = data.actor.account.nrql.rawResponse.facets;\r\n\r\n    for (var i = 0; i < timesliceData.length; i++) {\r\n        if (timesliceData[i].name == \"UNKNOWN\") {\r\n            statusOccurances[\"unknown\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"unknown\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"OPERATIONAL\") {\r\n            statusOccurances[\"operational\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"operational\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"DISRUPTED\") {\r\n            statusOccurances[\"disrupted\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"disrupted\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"DEGRADED\") {\r\n            statusOccurances[\"degraded\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"degraded\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else {\r\n            statusOccurances[\"unknown\"].push(0);\r\n            statusOccurances[\"operational\"].push(0);\r\n            statusOccurances[\"disrupted\"].push(0);\r\n            statusOccurances[\"degraded\"].push(0);\r\n        }\r\n    }\r\n\r\n    return statusOccurances\r\n}\r\n\r\nconst formatObject = (obj) => {\r\n\r\n    const keys = Object.keys(obj);\r\n\r\n    if (!keys.includes(\"unknown\")) {\r\n        obj[\"unknown\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"unknown\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"operational\")) {\r\n        obj[\"operational\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"operational\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"degraded\")) {\r\n        obj[\"degraded\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"degraded\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"disrupted\")) {\r\n        obj[\"disrupted\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"disrupted\"].push(0);\r\n        }\r\n    }\r\n\r\n    const result = [];\r\n    var output = [];\r\n    const maxLength = Math.max(\r\n        ...Object.values(obj).map((arr) => arr.length)\r\n    );\r\n\r\n    for (let i = 0; i < maxLength; i++) {\r\n        const formattedEntry = {};\r\n\r\n        for (const key in obj) {\r\n            formattedEntry[key] =\r\n                obj[key][i] !== undefined ? obj[key][i] : null;\r\n        }\r\n\r\n        result.push(formattedEntry);\r\n    }\r\n\r\n    for (var i = 0; i < result.length; i++) {\r\n        if (result[i].unknown != 0) {\r\n            output.push(\"UNKNOWN\");\r\n        } else if (result[i].degraded != 0) {\r\n            output.push(\"DEGRADED\");\r\n        } else if (result[i].disrupted != 0) {\r\n            output.push(\"DISRUPTED\");\r\n        } else {\r\n            output.push(\"OPERATIONAL\");\r\n        }\r\n    }\r\n    return output;\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Container, ListGroup, ProgressBar } from 'react-bootstrap';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\n\r\n\r\n\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n// nerdGraph\r\nimport { NerdGraphQuery } from 'nr1';\r\n\r\nconst Ecommerce_B2B_User = ({ cardName, timeUpdater, guid, colorSetter }) => {\r\n\r\n\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [userData, setUserData] = useState({\r\n        progressCountStatus: []\r\n    });\r\n\r\n    const [userData_Custom, setUserData_Custom] = useState({\r\n        app_name: \"\",\r\n        \"Response time\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        \"Login Page\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        'Partner Authentication': {\r\n            current: null,\r\n            prev: null,\r\n\r\n        },\r\n        \"Home Page\": {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        status_val: \"\",\r\n        \"Synthetic availability\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        \"End user experience\": {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        criticalAlertCount: {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        warningAlertCount: {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        headlineStatus: null,\r\n        progressCountStatus: []\r\n    })\r\n\r\n    const [metricComparison, setMetricCompariosn] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchUserData = async () => {\r\n\r\n            try {\r\n\r\n                const wl_guid = \"Mjc4MTY2N3xOUjF8V09SS0xPQUR8MjAzNzEy\";\r\n                let Page_url_in_key_value = {};\r\n\r\n                var entities = [];\r\n\r\n                const list_of_guids_Promise = await fetchNerdGraphQuery(`\r\n           query \r\n             {\r\n          actor {\r\n                user {\r\n                  name\r\n                }\r\n                account(id: 2781667) {\r\n                  workload {\r\n                    collection(guid: \"${wl_guid}\") {\r\n                      name\r\n                      entities {\r\n                        guid\r\n                      }\r\n                    }\r\n                  }\r\n              }\r\n          }\r\n        }\r\n        `)\r\n\r\n                const list_of_guid_result = list_of_guids_Promise.actor.account.workload.collection.entities;\r\n\r\n\r\n                //* Inserting all the guids\r\n                const list_of_guids = [];\r\n\r\n                for (var i = 0; i < list_of_guid_result.length; i++) {\r\n                    list_of_guids.push(list_of_guid_result[i].guid);\r\n                }\r\n\r\n                const entity_Info_Promise = await fetchNerdGraphQuery(`\r\n            query {\r\n              actor {\r\n                account(id: 2781667) {\r\n                  id\r\n                }\r\n                entities(guids: [${list_of_guids.map(guid => `\"${guid}\"`).join(',')}]) {\r\n                  name\r\n                  entityType\r\n                  type\r\n                }\r\n              }\r\n            }\r\n        `);\r\n\r\n                const entity_info_result = entity_Info_Promise.actor.entities\r\n\r\n                let dict = {};\r\n                dict[\"infra_workloads\"] = entity_info_result\r\n                    .filter((i) => i[\"entityType\"] === \"WORKLOAD_ENTITY\")\r\n                    .map((i) => i[\"name\"]);\r\n\r\n                dict[\"synthetic\"] = entity_info_result\r\n                    .filter((i) => i[\"entityType\"] === \"SYNTHETIC_MONITOR_ENTITY\")\r\n                    .map((i) => i[\"name\"]);\r\n\r\n\r\n\r\n                const infra_status_Promise = await fetchNerdGraphQuery(`\r\n            query {\r\n              actor {\r\n                user {\r\n                  name\r\n                }\r\n                account(id: 2781667) {\r\n                  nrql(\r\n                    query: \"FROM WorkloadStatus SELECT latest(statusValue) WHERE entity.name IN ('NextGenerationeCommerceCOLO-PROD_B2B_Infra')\"\r\n                  ) {\r\n                    embeddedChartUrl\r\n                    nrql\r\n                    otherResult\r\n                    rawResponse\r\n                    staticChartUrl\r\n                    totalResult\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          `);\r\n\r\n                const synthetic_Promise = await fetchNerdGraphQuery(`\r\n                query {\r\n                  actor {\r\n                    user {\r\n                      name\r\n                    }\r\n                    account(id: 2781667) {\r\n                      nrql(\r\n                        query: \"FROM SyntheticCheck SELECT percentage(count(result), WHERE result='SUCCESS') WHERE monitorName IN ('211460-Next Generation eCommerce COLO-UAT_B2B_UserJourney') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                      ) {\r\n                        embeddedChartUrl\r\n                        nrql\r\n                        otherResult\r\n                        rawResponse\r\n                        staticChartUrl\r\n                        totalResult\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n          `);\r\n\r\n                setUserData_Custom({\r\n                    status_val: infra_status_Promise.actor.account.nrql.rawResponse.results[0].latest,\r\n                    \"Synthetic availability\": {\r\n                        current: synthetic_Promise.actor.account.nrql.rawResponse.current.results[0].result,\r\n                        prev: synthetic_Promise.actor.account.nrql.rawResponse.previous.results[0].result,\r\n                    }\r\n                })\r\n\r\n\r\n                const headlineStatusPromise = fetchNerdGraphQuery(`\r\n                  query {\r\n                    actor {\r\n                      user {\r\n                        name\r\n                      }\r\n                      account(id: 2781667) {\r\n                        nrql(\r\n                          query: \"FROM WorkloadStatus SELECT latest(statusValue) WHERE entity.name='GCC_Ecommerce User Journey' SINCE 5 Minutes AGO\"\r\n                        ) {\r\n                          embeddedChartUrl\r\n                          nrql\r\n                          otherResult\r\n                          rawResponse\r\n                          staticChartUrl\r\n                          totalResult\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n          `)\r\n\r\n\r\n                const criticalAlertCountPromise = fetchNerdGraphQuery(`{\r\n                  actor {\r\n                    user {\r\n                      name\r\n                    }\r\n                account(id: 2781667) {\r\n                nrql(\r\n                        query: \"SELECT count(*) from NrAiIncident where event = 'open' and priority = 'critical' and entity.name IN ('210135-Partner Ready Portal (PRP)-Production','213049-CORONA-PRD','211240-ADDISON-Production-pricing','211240-ADDISON-Production-service-delivery','211240-ADDISON-Production','211460-Next Generation eCommerce COLO-Production','213051-Order Capture Layer-PRD','213032-Internet Pricing and Configurator Service-PRD-OCC','211240-ADDISON-Production-inventory','213503-Global Tax Engine-Integration', '211289-emdm-production','212922-NSA - Geolocation Service HPE-PRD') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                      ) {\r\n                        embeddedChartUrl\r\n                        nrql\r\n                        otherResult\r\n                        rawResponse\r\n                        staticChartUrl\r\n                        totalResult\r\n                      } \r\n                    }\r\n                  }\r\n                }\r\n          `)\r\n\r\n                const warningAlertCountPromise = fetchNerdGraphQuery(`{\r\n                      actor {\r\n                        user {\r\n                          name\r\n                        }\r\n                    account(id: 2781667) {\r\n                    nrql(\r\n                            query: \"SELECT count(*) from NrAiIncident where event = 'open' and priority = 'warning' and entity.name IN ('210135-Partner Ready Portal (PRP)-Production','213049-CORONA-PRD','211240-ADDISON-Production-pricing','211240-ADDISON-Production-service-delivery','211240-ADDISON-Production','211460-Next Generation eCommerce COLO-Production','213051-Order Capture Layer-PRD','213032-Internet Pricing and Configurator Service-PRD-OCC','211240-ADDISON-Production-inventory','213503-Global Tax Engine-Integration','211289-emdm-production','212922-NSA - Geolocation Service HPE-PRD') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                          ) {\r\n                            embeddedChartUrl\r\n                            nrql\r\n                            otherResult\r\n                            rawResponse\r\n                            staticChartUrl\r\n                            totalResult\r\n                          } \r\n                        }\r\n                      }\r\n                    }\r\n                    \r\n          `)\r\n\r\n                const theProgressCountPromise = fetchNerdGraphQuery(`{\r\n            actor {\r\n              account(id: 2781667) {\r\n                nrql(query: \"FROM WorkloadStatus SELECT count(*) SINCE 3 HOURS AGO WHERE entity.name IN ('NextGenerationeCommerceCOLO-PROD_B2B_Infra') FACET statusValue TIMESERIES 18 MINUTES\") {\r\n                  embeddedChartUrl\r\n                  nrql\r\n                  otherResult\r\n                  rawResponse\r\n                  staticChartUrl\r\n                  totalResult\r\n                }\r\n              }\r\n            }\r\n          }`)\r\n\r\n                const fetch_arrow_color_query_Promise = fetchNerdGraphQuery(`{\r\n            actor {\r\n              account(id: 2781667) {\r\n                nrql(\r\n                  query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT standard_metric, custom_metric, warning_threshold, critical_threshold, comparison WHERE workload_name = 'PRP_Master_Workload'\"\r\n                ) {\r\n                  embeddedChartUrl\r\n                  nrql\r\n                  otherResult\r\n                  rawResponse\r\n                  staticChartUrl\r\n                  totalResult\r\n                }\r\n              }\r\n            }\r\n          }`)\r\n\r\n\r\n                const [\r\n                    criticalAlertCount,\r\n                    warningAlertCount,\r\n                    headlineStatus,\r\n                    theProgressCount,\r\n                    fetch_arrow_color_query\r\n                ] =\r\n                    await Promise.all([\r\n                        criticalAlertCountPromise,\r\n                        warningAlertCountPromise,\r\n                        headlineStatusPromise,\r\n                        theProgressCountPromise,\r\n                        fetch_arrow_color_query_Promise\r\n                    ])\r\n\r\n                setMetricCompariosn(fetch_arrow_color_query.actor.account.nrql.rawResponse.results[0].events)\r\n\r\n                let progressCountOccurance = getOccuranceObject(theProgressCount)\r\n                let progressCount = formatObject(progressCountOccurance)\r\n\r\n                setUserData({\r\n                    progressCountStatus: progressCount\r\n                });\r\n\r\n\r\n\r\n                // Fetching app name\r\n                const fetch_App_name = await fetch_App_name_Promise;\r\n                const appName = await fetch_App_name.actor.account.nrql.rawResponse.results[0].members[0];\r\n\r\n                // Fetching end user performance using the obtained app name\r\n                const fetch_user_performance = await fetch_throughput(appName);\r\n                //pagename and url in ket value pair\r\n                const fetch_url_pagename = await fetch_URI_name_Promise;\r\n\r\n\r\n                //separte page:urls\r\n                fetch_url_pagename.actor.account.nrql.rawResponse.facets.forEach(\r\n                    (e) => Page_url_in_key_value[e.name[0]] = e.name[1]\r\n                );\r\n\r\n\r\n                const [\r\n                    fetch_response_time,\r\n                    fetch_login_custom,\r\n                    fetch_Partner_custom,\r\n                    fetch_HomePage_custom\r\n                ] =\r\n                    await Promise.all([\r\n                        fetch_response_time_Promise(appName),\r\n                        fetch_custom_1(appName, Page_url_in_key_value['Login Page']),\r\n                        fetch_custom_2(appName, Page_url_in_key_value['Partner Authentication']),\r\n                        fetch_custom_3(appName, Page_url_in_key_value['Home Page'])\r\n                    ])\r\n\r\n                setUserData_Custom(prevState => ({\r\n                    ...prevState,\r\n                    app_name: appName,\r\n                    \"Response time\": {\r\n                        current: fetch_response_time.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_response_time.actor.account.nrql.rawResponse.previous.results[0].average,\r\n                    },\r\n                    'Login Page': {\r\n                        current: fetch_login_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_login_custom.actor.account.nrql.rawResponse.previous.results[0].average,\r\n                    },\r\n                    'Partner Authentication': {\r\n                        current: fetch_Partner_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_Partner_custom.actor.account.nrql.rawResponse.previous.results[0].average\r\n                    },\r\n                    \"Home Page\": {\r\n                        current: fetch_HomePage_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_HomePage_custom.actor.account.nrql.rawResponse.previous.results[0].average\r\n                    },\r\n                    'End user experience': {\r\n                        current: fetch_user_performance.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: fetch_user_performance.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                    headlineStatus: headlineStatus.actor.account.nrql.rawResponse.results[0].latest,\r\n                    progressCountStatus: progressCount,\r\n                    criticalAlertCount: {\r\n                        current: criticalAlertCount.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: criticalAlertCount.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                    warningAlertCount: {\r\n                        current: warningAlertCount.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: warningAlertCount.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                }))\r\n                setLoading(false);\r\n            } catch (error) {\r\n                alert(error)\r\n                console.error('Error fetching user data:', error);\r\n                setError(error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchUserData();\r\n\r\n    }, [timeUpdater]);\r\n\r\n\r\n    //* query for appName\r\n    const fetch_App_name_Promise = fetchNerdGraphQuery(`{\r\n      actor {\r\n        account(id: 2781667) {\r\n          nrql(query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT uniques(app_name) WHERE workload_name = 'PRP_Master_Workload' SINCE 7 DAYS AGO\") {\r\n            embeddedChartUrl\r\n            nrql\r\n            otherResult\r\n            rawResponse\r\n            staticChartUrl\r\n            totalResult\r\n          }\r\n        }\r\n      }\r\n    }`);\r\n\r\n\r\n    /**\r\n     * * End user performance\r\n     * @appName : 210135-Partner Ready Portal (PRP)-Production\r\n     * */\r\n\r\n    const fetch_throughput = async (appName) => {\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT count(*) WHERE appName IN ('210135-Partner Ready Portal (PRP)-Production','213049-CORONA-PRD','211240-ADDISON-Production-pricing','211240-ADDISON-Production-service-delivery','211240-ADDISON-Production','211460-Next Generation eCommerce COLO-Production','213051-Order Capture Layer-PRD','213032-Internet Pricing and Configurator Service-PRD-OCC','211240-ADDISON-Production-inventory','213503-Global Tax Engine-Integration','211289-emdm-production','212922-NSA - Geolocation Service HPE-PRD') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n        }`);\r\n\r\n            return response;\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    // Query for uri's\r\n    const fetch_URI_name_Promise = fetchNerdGraphQuery(`{\r\n        actor {\r\n          account(id: 2781667) {\r\n            nrql(query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT count(*) WHERE workload_name = 'PRP_Master_Workload' AND request_uri != 'NA' AND request_uri != 'custom_uri' FACET custom_metric, request_uri SINCE 7 DAYS AGO\") {\r\n              embeddedChartUrl\r\n              nrql\r\n              otherResult\r\n              rawResponse\r\n              staticChartUrl\r\n              totalResult\r\n            }\r\n          }\r\n        }\r\n      }`);\r\n\r\n    //Response time\r\n    const fetch_response_time_Promise = async (appName) => {\r\n\r\n        //* dynamic appName \r\n        try {\r\n            let response_Time_Promise = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName IN ('210135-Partner Ready Portal (PRP)-Production','213049-CORONA-PRD','211240-ADDISON-Production-pricing','211240-ADDISON-Production-service-delivery','211240-ADDISON-Production','211460-Next Generation eCommerce COLO-Production','213051-Order Capture Layer-PRD','213032-Internet Pricing and Configurator Service-PRD-OCC','211240-ADDISON-Production-inventory','213503-Global Tax Engine-Integration','211289-emdm-production','212922-NSA - Geolocation Service HPE-PRD')  SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n        }`);\r\n            return response_Time_Promise\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    /**\r\n      * * Login_cust | Partnerauth_cust | Homepage_cust\r\n      * @dynamicURI : /web/prp/login | /group/prp | /group/prp/home\r\n      * @appName : : 210135-Partner Ready Portal (PRP)-Production\r\n      */\r\n\r\n    const fetch_custom_1 = async (appName, dynamicURI) => {\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName IN ('210135-Partner Ready Portal (PRP)-Production','213049-CORONA-PRD','211240-ADDISON-Production-pricing','211240-ADDISON-Production-service-delivery','211240-ADDISON-Production','211460-Next Generation eCommerce COLO-Production','213051-Order Capture Layer-PRD','213032-Internet Pricing and Configurator Service-PRD-OCC','211240-ADDISON-Production-inventory','213503-Global Tax Engine-Integration','211289-emdm-production','212922-NSA - Geolocation Service HPE-PRD')  AND request.uri IN ('/shop/login/login','/Geolocator-Service/GeoLocatorService','/shop/loginPageSession','/shop/loginValidation','/shop/rememberMe','/shop/login') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    const fetch_custom_2 = async (appName, dynamicURI) => {\r\n\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName IN ('210135-Partner Ready Portal (PRP)-Production','213049-CORONA-PRD','211240-ADDISON-Production-pricing','211240-ADDISON-Production-service-delivery','211240-ADDISON-Production','211460-Next Generation eCommerce COLO-Production','213051-Order Capture Layer-PRD','213032-Internet Pricing and Configurator Service-PRD-OCC','211240-ADDISON-Production-inventory','213503-Global Tax Engine-Integration','211289-emdm-production','212922-NSA - Geolocation Service HPE-PRD')  AND request.uri IN ('/cart/add','/api/search/supplier-plant','/ipc-ws/ConfigurationService','/simulations/offer-prices','/api/search/sku-info','/gateway/sabrix/services/taxcalculationservice/2011-09-01/taxcalculationservice') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    const fetch_custom_3 = async (appName, dynamicURI) => {\r\n\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName IN ('210135-Partner Ready Portal (PRP)-Production','213049-CORONA-PRD','211240-ADDISON-Production-pricing','211240-ADDISON-Production-service-delivery','211240-ADDISON-Production','211460-Next Generation eCommerce COLO-Production','213051-Order Capture Layer-PRD','213032-Internet Pricing and Configurator Service-PRD-OCC','211240-ADDISON-Production-inventory','213503-Global Tax Engine-Integration','211289-emdm-production','212922-NSA - Geolocation Service HPE-PRD')  AND request.uri IN ('/createCheckoutView','/ocl-ui/punchout/receiveeprimecart','/ipc-ws/ConfigurationService','/simulations/offer-prices/api/search/sku-info','/api/search/supplier-plant','/gateway/sabrix/services/taxcalculationservice/2011-09-01/taxcalculationservice','/api/simulate-sales-orders') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n\r\n    let deafultHeadingColor = 'grayBackground'\r\n\r\n    if (userData_Custom.headlineStatus === 'OPERATIONAL') {\r\n        deafultHeadingColor = 'lightGreenBackground'\r\n    }\r\n    else if (userData_Custom.headlineStatus === 'DEGRADED') {\r\n        deafultHeadingColor = 'yellowBackground'\r\n    }\r\n    else if (userData_Custom.headlineStatus === 'DISRUPTED') {\r\n        deafultHeadingColor = 'redBackground'\r\n    }\r\n\r\n\r\n\r\n    // Progress bar UI\r\n    const progressBarUI = userData.progressCountStatus.map(key => {\r\n        let variant;\r\n        switch (key) {\r\n            case 'DEGRADED':\r\n                variant = 'warning';\r\n                break;\r\n            case 'DISRUPTED':\r\n                variant = 'danger';\r\n                break;\r\n            case 'OPERATIONAL':\r\n                variant = 'success';\r\n                break;\r\n            case 'UNKNOWN':\r\n                variant = 'secondary';\r\n                break;\r\n            default:\r\n                variant = 'info';\r\n                break;\r\n        }\r\n        return <ProgressBar variant={variant} now={10} key={key} />;\r\n    });\r\n\r\n\r\n\r\n    const getClassNameForPages = (e, pageName) => {\r\n        if (e['comparison'] === 'G') {\r\n            if (userData_Custom[pageName]?.current > e['critical_threshold']) {\r\n                return 'red';\r\n            }\r\n            if (userData_Custom[pageName]?.current >= e['warning_threshold'] && userData_Custom[pageName]?.current < e['critical_threshold']) {\r\n                return 'yellow';\r\n            }\r\n        }\r\n\r\n        if (e['comparison'] === 'L') {\r\n            if (userData_Custom[pageName]?.current < e['critical_threshold']) {\r\n                return 'red';\r\n            }\r\n            if (userData_Custom[pageName]?.current?.current < e['warning_threshold'] && userData_Custom[pageName]?.current > e['critical_threshold']) {\r\n                return 'yellow';\r\n            }\r\n        }\r\n\r\n        return 'green';\r\n    };\r\n\r\n    const pageClassNames = (pageName) => {\r\n\r\n\r\n        return metricComparison.map(e => {\r\n            if (e['custom_metric'] === pageName || e['standard_metric'] === pageName) {\r\n                return getClassNameForPages(e, pageName);\r\n            }\r\n            return '';\r\n        }).join(' ');\r\n    };\r\n\r\n    const showToolTipsValue = (pageName) => {\r\n        for (const pageObject of metricComparison) {\r\n            if (pageObject['standard_metric'] === pageName || pageObject['custom_metric'] === pageName) {\r\n                return (\r\n                    <div>\r\n                        Warning : {pageObject.warning_threshold}\r\n                        <br />\r\n                        Critical : {pageObject.critical_threshold}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Col>\r\n            <Card style={{ maxHeight: \"100%\", marginBottom: \"1.6rem\" }} border=\"dark\">\r\n                <Card.Header className={deafultHeadingColor}>\r\n                    {cardName}\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Card.Title>\r\n                        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                            <ProgressBar style={{ width: \"60%\" }}>{progressBarUI}</ProgressBar>\r\n                            <p style={{ marginLeft: \"10px\", marginBottom: \"0px\" }}> Host Status for 3h </p>\r\n                        </div>\r\n\r\n                    </Card.Title>\r\n                    <Card.Text>\r\n                        <ListGroup variant=\"flush\">\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}> Infrastructure Health </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={faCaretUp}\r\n                                            size=\"2x\"\r\n                                            style={{ color: \"green\" }}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        {userData_Custom.status_val ? userData_Custom.status_val : 'NA'}\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>\r\n                                        <span>Response Time (sec) </span>\r\n                                    </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={userData_Custom['Response time']?.current > userData_Custom['Response time']?.prev ? faCaretUp : faCaretDown}\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Response time')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Response time')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Response time']?.current ? userData_Custom['Response time']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Synthetic Availability (%) </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Synthetic availability']?.current >=\r\n                                                    userData_Custom['Synthetic availability']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Synthetic availability')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Synthetic availability')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Synthetic availability']?.current ?\r\n                                                    userData_Custom['Synthetic availability']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Throughput  </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['End user experience']?.current > userData_Custom['End user experience']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('End user experience')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('End user experience')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['End user experience']?.current ?\r\n                                                    userData_Custom['End user experience']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Login </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={userData_Custom['Login Page']?.current >\r\n                                                userData_Custom['Login Page']?.prev\r\n                                                ? faCaretUp\r\n                                                : faCaretDown}\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Login Page')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Login Page')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Login Page']?.current ?\r\n                                                    userData_Custom['Login Page']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Add to Cart</Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Partner Authentication']?.current > userData_Custom['Partner Authentication']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Partner Authentication')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Partner Authentication')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {\r\n                                                    userData_Custom['Partner Authentication']?.current ?\r\n                                                        userData_Custom['Partner Authentication']?.current.toFixed(2) : 'NA'\r\n                                                }\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Create PO</Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Home Page']?.current > userData_Custom['Home Page']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Home Page')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Home Page')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Home Page']?.current ?\r\n                                                    userData_Custom['Home Page']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Active Alerts </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={faCaretUp}\r\n                                            size=\"2x\"\r\n                                            className='green'\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>\r\n                                                    {\r\n                                                        <div>\r\n                                                            Warning :{\" \"}\r\n                                                            {\r\n                                                                userData_Custom?.warningAlertCount?.current &&\r\n                                                                userData_Custom?.warningAlertCount?.current.toFixed(2)\r\n                                                            }\r\n                                                            <br />\r\n                                                            Critical :{\" \"}\r\n                                                            <a\r\n                                                                target=\"_blank\"\r\n                                                                href=\"/\"\r\n                                                            >\r\n                                                                {\r\n                                                                    userData_Custom?.criticalAlertCount?.current &&\r\n                                                                    userData_Custom?.criticalAlertCount?.current.toFixed(2)\r\n                                                                }\r\n                                                            </a>\r\n                                                        </div>\r\n                                                    }\r\n                                                </Tooltip>\r\n                                            }\r\n                                        >\r\n                                            <span style={{ cursor: \"pointer\" }}>\r\n                                                {userData_Custom?.criticalAlertCount?.current !== 0 || userData_Custom?.warningAlertCount?.current !== 0 ?\r\n                                                    (\r\n                                                        userData_Custom?.criticalAlertCount?.current +\r\n                                                        userData_Custom?.warningAlertCount?.current\r\n                                                    ).toFixed(2) : \"NA\"}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        </Col>\r\n    );\r\n};\r\n\r\nexport default Ecommerce_B2B_User;\r\n\r\n\r\n\r\n// Function to make a NerdGraph query\r\nconst fetchNerdGraphQuery = async (query) => {\r\n    const response = await NerdGraphQuery.query({ query });\r\n    return response.data;\r\n};\r\n\r\n\r\nconst getOccuranceObject = (data) => {\r\n\r\n    var statusOccurances = {};\r\n    const timesliceData = data.actor.account.nrql.rawResponse.facets;\r\n\r\n    for (var i = 0; i < timesliceData.length; i++) {\r\n        if (timesliceData[i].name == \"UNKNOWN\") {\r\n            statusOccurances[\"unknown\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"unknown\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"OPERATIONAL\") {\r\n            statusOccurances[\"operational\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"operational\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"DISRUPTED\") {\r\n            statusOccurances[\"disrupted\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"disrupted\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"DEGRADED\") {\r\n            statusOccurances[\"degraded\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"degraded\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else {\r\n            statusOccurances[\"unknown\"].push(0);\r\n            statusOccurances[\"operational\"].push(0);\r\n            statusOccurances[\"disrupted\"].push(0);\r\n            statusOccurances[\"degraded\"].push(0);\r\n        }\r\n    }\r\n\r\n    return statusOccurances\r\n}\r\n\r\nconst formatObject = (obj) => {\r\n\r\n    const keys = Object.keys(obj);\r\n\r\n    if (!keys.includes(\"unknown\")) {\r\n        obj[\"unknown\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"unknown\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"operational\")) {\r\n        obj[\"operational\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"operational\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"degraded\")) {\r\n        obj[\"degraded\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"degraded\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"disrupted\")) {\r\n        obj[\"disrupted\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"disrupted\"].push(0);\r\n        }\r\n    }\r\n\r\n    const result = [];\r\n    var output = [];\r\n    const maxLength = Math.max(\r\n        ...Object.values(obj).map((arr) => arr.length)\r\n    );\r\n\r\n    for (let i = 0; i < maxLength; i++) {\r\n        const formattedEntry = {};\r\n\r\n        for (const key in obj) {\r\n            formattedEntry[key] =\r\n                obj[key][i] !== undefined ? obj[key][i] : null;\r\n        }\r\n\r\n        result.push(formattedEntry);\r\n    }\r\n\r\n    for (var i = 0; i < result.length; i++) {\r\n        if (result[i].unknown != 0) {\r\n            output.push(\"UNKNOWN\");\r\n        } else if (result[i].degraded != 0) {\r\n            output.push(\"DEGRADED\");\r\n        } else if (result[i].disrupted != 0) {\r\n            output.push(\"DISRUPTED\");\r\n        } else {\r\n            output.push(\"OPERATIONAL\");\r\n        }\r\n    }\r\n    return output;\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Container, ListGroup, ProgressBar } from 'react-bootstrap';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\n\r\n\r\n\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n// nerdGraph\r\nimport { NerdGraphQuery } from 'nr1';\r\n\r\nconst Ecommerce_B2C_User = ({ cardName, timeUpdater, guid, colorSetter }) => {\r\n\r\n\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [userData, setUserData] = useState({\r\n        progressCountStatus: []\r\n    });\r\n\r\n    const [userData_Custom, setUserData_Custom] = useState({\r\n        app_name: \"\",\r\n        \"Response time\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        \"Login Page\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        'Partner Authentication': {\r\n            current: null,\r\n            prev: null,\r\n\r\n        },\r\n        \"Home Page\": {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        status_val: \"\",\r\n        \"Synthetic availability\": {\r\n            current: null,\r\n            prev: null,\r\n        },\r\n        \"End user experience\": {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        criticalAlertCount: {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        warningAlertCount: {\r\n            current: null,\r\n            prev: null\r\n        },\r\n        headlineStatus: null,\r\n        progressCountStatus: []\r\n    })\r\n\r\n    const [metricComparison, setMetricCompariosn] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchUserData = async () => {\r\n\r\n            try {\r\n\r\n                const wl_guid = \"Mjc4MTY2N3xOUjF8V09SS0xPQUR8MjAzNzEy\";\r\n                let Page_url_in_key_value = {};\r\n\r\n                var entities = [];\r\n\r\n                const list_of_guids_Promise = await fetchNerdGraphQuery(`\r\n           query \r\n             {\r\n          actor {\r\n                user {\r\n                  name\r\n                }\r\n                account(id: 2781667) {\r\n                  workload {\r\n                    collection(guid: \"${wl_guid}\") {\r\n                      name\r\n                      entities {\r\n                        guid\r\n                      }\r\n                    }\r\n                  }\r\n              }\r\n          }\r\n        }\r\n        `)\r\n\r\n                const list_of_guid_result = list_of_guids_Promise.actor.account.workload.collection.entities;\r\n\r\n\r\n                //* Inserting all the guids\r\n                const list_of_guids = [];\r\n\r\n                for (var i = 0; i < list_of_guid_result.length; i++) {\r\n                    list_of_guids.push(list_of_guid_result[i].guid);\r\n                }\r\n\r\n                const entity_Info_Promise = await fetchNerdGraphQuery(`\r\n            query {\r\n              actor {\r\n                account(id: 2781667) {\r\n                  id\r\n                }\r\n                entities(guids: [${list_of_guids.map(guid => `\"${guid}\"`).join(',')}]) {\r\n                  name\r\n                  entityType\r\n                  type\r\n                }\r\n              }\r\n            }\r\n        `);\r\n\r\n                const entity_info_result = entity_Info_Promise.actor.entities\r\n\r\n                let dict = {};\r\n                dict[\"infra_workloads\"] = entity_info_result\r\n                    .filter((i) => i[\"entityType\"] === \"WORKLOAD_ENTITY\")\r\n                    .map((i) => i[\"name\"]);\r\n\r\n                dict[\"synthetic\"] = entity_info_result\r\n                    .filter((i) => i[\"entityType\"] === \"SYNTHETIC_MONITOR_ENTITY\")\r\n                    .map((i) => i[\"name\"]);\r\n\r\n\r\n\r\n                const infra_status_Promise = await fetchNerdGraphQuery(`\r\n            query {\r\n              actor {\r\n                user {\r\n                  name\r\n                }\r\n                account(id: 2781667) {\r\n                  nrql(\r\n                    query: \"FROM WorkloadStatus SELECT latest(statusValue) WHERE entity.name IN ('NextGenerationeCommerceCOLO-PROD_B2C_Infra')\"\r\n                  ) {\r\n                    embeddedChartUrl\r\n                    nrql\r\n                    otherResult\r\n                    rawResponse\r\n                    staticChartUrl\r\n                    totalResult\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          `);\r\n\r\n                const synthetic_Promise = await fetchNerdGraphQuery(`\r\n                query {\r\n                  actor {\r\n                    user {\r\n                      name\r\n                    }\r\n                    account(id: 2781667) {\r\n                      nrql(\r\n                        query: \"FROM SyntheticCheck SELECT percentage(count(result), WHERE result='SUCCESS') WHERE monitorName IN ('211460-Next Generation eCommerce COLO-UAT_B2C_UserJourney') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                      ) {\r\n                        embeddedChartUrl\r\n                        nrql\r\n                        otherResult\r\n                        rawResponse\r\n                        staticChartUrl\r\n                        totalResult\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n          `);\r\n\r\n                setUserData_Custom({\r\n                    status_val: infra_status_Promise.actor.account.nrql.rawResponse.results[0].latest,\r\n                    \"Synthetic availability\": {\r\n                        current: synthetic_Promise.actor.account.nrql.rawResponse.current.results[0].result,\r\n                        prev: synthetic_Promise.actor.account.nrql.rawResponse.previous.results[0].result,\r\n                    }\r\n                })\r\n\r\n\r\n                const headlineStatusPromise = fetchNerdGraphQuery(`\r\n                  query {\r\n                    actor {\r\n                      user {\r\n                        name\r\n                      }\r\n                      account(id: 2781667) {\r\n                        nrql(\r\n                          query: \"FROM WorkloadStatus SELECT latest(statusValue) WHERE entity.name='GCC_Ecommerce User Journey' SINCE 5 Minutes AGO\"\r\n                        ) {\r\n                          embeddedChartUrl\r\n                          nrql\r\n                          otherResult\r\n                          rawResponse\r\n                          staticChartUrl\r\n                          totalResult\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n          `)\r\n\r\n\r\n                const criticalAlertCountPromise = fetchNerdGraphQuery(`{\r\n                  actor {\r\n                    user {\r\n                      name\r\n                    }\r\n                account(id: 2781667) {\r\n                nrql(\r\n                        query: \"SELECT count(*) from NrAiIncident where event = 'open' and priority = 'critical' and entity.name IN ('211460-Next Generation eCommerce COLO-Production','212922-NSA - Geolocation Service HPE-PRD','214498-Mkt Product recommendation Engine-PRD','213741-Address Service-PRD','211289-emdm-production','211607-MDCP Contact-PRD') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                      ) {\r\n                        embeddedChartUrl\r\n                        nrql\r\n                        otherResult\r\n                        rawResponse\r\n                        staticChartUrl\r\n                        totalResult\r\n                      } \r\n                    }\r\n                  }\r\n                }\r\n          `)\r\n\r\n                const warningAlertCountPromise = fetchNerdGraphQuery(`{\r\n                      actor {\r\n                        user {\r\n                          name\r\n                        }\r\n                    account(id: 2781667) {\r\n                    nrql(\r\n                            query: \"SELECT count(*) from NrAiIncident where event = 'open' and priority = 'warning' and entity.name IN ('211460-Next Generation eCommerce COLO-Production','212922-NSA - Geolocation Service HPE-PRD','214498-Mkt Product recommendation Engine-PRD','213741-Address Service-PRD','211289-emdm-production','211607-MDCP Contact-PRD') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\"\r\n                          ) {\r\n                            embeddedChartUrl\r\n                            nrql\r\n                            otherResult\r\n                            rawResponse\r\n                            staticChartUrl\r\n                            totalResult\r\n                          } \r\n                        }\r\n                      }\r\n                    }\r\n                    \r\n          `)\r\n\r\n                const theProgressCountPromise = fetchNerdGraphQuery(`{\r\n            actor {\r\n              account(id: 2781667) {\r\n                nrql(query: \"FROM WorkloadStatus SELECT count(*) SINCE 3 HOURS AGO WHERE entity.name IN ('NextGenerationeCommerceCOLO-PROD_B2C_Infra') FACET statusValue TIMESERIES 18 MINUTES\") {\r\n                  embeddedChartUrl\r\n                  nrql\r\n                  otherResult\r\n                  rawResponse\r\n                  staticChartUrl\r\n                  totalResult\r\n                }\r\n              }\r\n            }\r\n          }`)\r\n\r\n                const fetch_arrow_color_query_Promise = fetchNerdGraphQuery(`{\r\n            actor {\r\n              account(id: 2781667) {\r\n                nrql(\r\n                  query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT standard_metric, custom_metric, warning_threshold, critical_threshold, comparison WHERE workload_name = 'PRP_Master_Workload'\"\r\n                ) {\r\n                  embeddedChartUrl\r\n                  nrql\r\n                  otherResult\r\n                  rawResponse\r\n                  staticChartUrl\r\n                  totalResult\r\n                }\r\n              }\r\n            }\r\n          }`)\r\n\r\n\r\n                const [\r\n                    criticalAlertCount,\r\n                    warningAlertCount,\r\n                    headlineStatus,\r\n                    theProgressCount,\r\n                    fetch_arrow_color_query\r\n                ] =\r\n                    await Promise.all([\r\n                        criticalAlertCountPromise,\r\n                        warningAlertCountPromise,\r\n                        headlineStatusPromise,\r\n                        theProgressCountPromise,\r\n                        fetch_arrow_color_query_Promise\r\n                    ])\r\n\r\n                setMetricCompariosn(fetch_arrow_color_query.actor.account.nrql.rawResponse.results[0].events)\r\n\r\n                let progressCountOccurance = getOccuranceObject(theProgressCount)\r\n                let progressCount = formatObject(progressCountOccurance)\r\n\r\n                setUserData({\r\n                    progressCountStatus: progressCount\r\n                });\r\n\r\n\r\n\r\n                // Fetching app name\r\n                const fetch_App_name = await fetch_App_name_Promise;\r\n                const appName = await fetch_App_name.actor.account.nrql.rawResponse.results[0].members[0];\r\n\r\n                // Fetching end user performance using the obtained app name\r\n                const fetch_user_performance = await fetch_throughput(appName);\r\n                //pagename and url in ket value pair\r\n                const fetch_url_pagename = await fetch_URI_name_Promise;\r\n\r\n\r\n                //separte page:urls\r\n                fetch_url_pagename.actor.account.nrql.rawResponse.facets.forEach(\r\n                    (e) => Page_url_in_key_value[e.name[0]] = e.name[1]\r\n                );\r\n\r\n\r\n                const [\r\n                    fetch_response_time,\r\n                    fetch_login_custom,\r\n                    fetch_Partner_custom,\r\n                    fetch_HomePage_custom\r\n                ] =\r\n                    await Promise.all([\r\n                        fetch_response_time_Promise(appName),\r\n                        fetch_custom_1(appName, Page_url_in_key_value['Login Page']),\r\n                        fetch_custom_2(appName, Page_url_in_key_value['Partner Authentication']),\r\n                        fetch_custom_3(appName, Page_url_in_key_value['Home Page'])\r\n                    ])\r\n\r\n                setUserData_Custom(prevState => ({\r\n                    ...prevState,\r\n                    app_name: appName,\r\n                    \"Response time\": {\r\n                        current: fetch_response_time.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_response_time.actor.account.nrql.rawResponse.previous.results[0].average,\r\n                    },\r\n                    'Login Page': {\r\n                        current: fetch_login_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_login_custom.actor.account.nrql.rawResponse.previous.results[0].average,\r\n                    },\r\n                    'Partner Authentication': {\r\n                        current: fetch_Partner_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_Partner_custom.actor.account.nrql.rawResponse.previous.results[0].average\r\n                    },\r\n                    \"Home Page\": {\r\n                        current: fetch_HomePage_custom.actor.account.nrql.rawResponse.current.results[0].average,\r\n                        prev: fetch_HomePage_custom.actor.account.nrql.rawResponse.previous.results[0].average\r\n                    },\r\n                    'End user experience': {\r\n                        current: fetch_user_performance.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: fetch_user_performance.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                    headlineStatus: headlineStatus.actor.account.nrql.rawResponse.results[0].latest,\r\n                    progressCountStatus: progressCount,\r\n                    criticalAlertCount: {\r\n                        current: criticalAlertCount.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: criticalAlertCount.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                    warningAlertCount: {\r\n                        current: warningAlertCount.actor.account.nrql.rawResponse.current.results[0].count,\r\n                        prev: warningAlertCount.actor.account.nrql.rawResponse.previous.results[0].count\r\n                    },\r\n                }))\r\n                setLoading(false);\r\n            } catch (error) {\r\n                alert(error)\r\n                console.error('Error fetching user data:', error);\r\n                setError(error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchUserData();\r\n\r\n    }, [timeUpdater]);\r\n\r\n\r\n    //* query for appName\r\n    const fetch_App_name_Promise = fetchNerdGraphQuery(`{\r\n      actor {\r\n        account(id: 2781667) {\r\n          nrql(query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT uniques(app_name) WHERE workload_name = 'PRP_Master_Workload' SINCE 7 DAYS AGO\") {\r\n            embeddedChartUrl\r\n            nrql\r\n            otherResult\r\n            rawResponse\r\n            staticChartUrl\r\n            totalResult\r\n          }\r\n        }\r\n      }\r\n    }`);\r\n\r\n\r\n    /**\r\n     * * End user performance\r\n     * @appName : 210135-Partner Ready Portal (PRP)-Production\r\n     * */\r\n\r\n    const fetch_throughput = async (appName) => {\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT count(*) WHERE appName IN ('211460-Next Generation eCommerce COLO-Production','212922-NSA - Geolocation Service HPE-PRD','214498-Mkt Product recommendation Engine-PRD','213741-Address Service-PRD','211289-emdm-production','211607-MDCP Contact-PRD') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n        }`);\r\n\r\n            return response;\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    // Query for uri's\r\n    const fetch_URI_name_Promise = fetchNerdGraphQuery(`{\r\n        actor {\r\n          account(id: 2781667) {\r\n            nrql(query: \"FROM lookup(LookupTable_210135_PRP_PRD) SELECT count(*) WHERE workload_name = 'PRP_Master_Workload' AND request_uri != 'NA' AND request_uri != 'custom_uri' FACET custom_metric, request_uri SINCE 7 DAYS AGO\") {\r\n              embeddedChartUrl\r\n              nrql\r\n              otherResult\r\n              rawResponse\r\n              staticChartUrl\r\n              totalResult\r\n            }\r\n          }\r\n        }\r\n      }`);\r\n\r\n    //Response time\r\n    const fetch_response_time_Promise = async (appName) => {\r\n\r\n        //* dynamic appName \r\n        try {\r\n            let response_Time_Promise = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName IN ('211460-Next Generation eCommerce COLO-Production','212922-NSA - Geolocation Service HPE-PRD','214498-Mkt Product recommendation Engine-PRD','213741-Address Service-PRD','211289-emdm-production','211607-MDCP Contact-PRD')  SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n        }`);\r\n            return response_Time_Promise\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    /**\r\n      * * Login_cust | Partnerauth_cust | Homepage_cust\r\n      * @dynamicURI : /web/prp/login | /group/prp | /group/prp/home\r\n      * @appName : : 210135-Partner Ready Portal (PRP)-Production\r\n      */\r\n\r\n    const fetch_custom_1 = async (appName, dynamicURI) => {\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName IN ('211460-Next Generation eCommerce COLO-Production','212922-NSA - Geolocation Service HPE-PRD','214498-Mkt Product recommendation Engine-PRD','213741-Address Service-PRD','211289-emdm-production','211607-MDCP Contact-PRD')  AND request.uri IN ('/oktaSessionsMeResponse','/oktaAuthenticateEndpoint','/login','/Geolocator-Service/GeoLocatorService','/oktaInvalidateUserSession') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    const fetch_custom_2 = async (appName, dynamicURI) => {\r\n\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName IN ('211460-Next Generation eCommerce COLO-Production','212922-NSA - Geolocation Service HPE-PRD','214498-Mkt Product recommendation Engine-PRD','213741-Address Service-PRD','211289-emdm-production','211607-MDCP Contact-PRD') AND (request.uri like  '%/my-account' or request.uri like  '%/profile/UserProfile%') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    const fetch_custom_3 = async (appName, dynamicURI) => {\r\n\r\n        try {\r\n            const response = await fetchNerdGraphQuery(`{\r\n          actor {\r\n            account(id: 2781667) {\r\n              nrql(query: \"FROM Transaction SELECT average(duration) WHERE appName IN('211460-Next Generation eCommerce COLO-Production','212922-NSA - Geolocation Service HPE-PRD','214498-Mkt Product recommendation Engine-PRD','213741-Address Service-PRD','211289-emdm-production','211607-MDCP Contact-PRD')  AND (request.uri like   '%/match/addressSuggestions%' or request.uri like '%/api/maintain'or request.uri like '%/api/contact/create' or request.uri like '%/multi/delivery-method/choose%' or request.uri like '%/checkout/multi/payment-method/add%') SINCE ${timeUpdater} AGO COMPARE WITH ${timeUpdater} AGO\") {\r\n                embeddedChartUrl\r\n                nrql\r\n                otherResult\r\n                rawResponse\r\n                staticChartUrl\r\n                totalResult\r\n              }\r\n            }\r\n          }\r\n         }`)\r\n            return response\r\n        } catch (error) {\r\n            throw new Error(`Error fetching end user performance: ${error.message}`);\r\n        }\r\n    }\r\n\r\n\r\n    let deafultHeadingColor = 'grayBackground'\r\n\r\n    if (userData_Custom.headlineStatus === 'OPERATIONAL') {\r\n        deafultHeadingColor = 'lightGreenBackground'\r\n    }\r\n    else if (userData_Custom.headlineStatus === 'DEGRADED') {\r\n        deafultHeadingColor = 'yellowBackground'\r\n    }\r\n    else if (userData_Custom.headlineStatus === 'DISRUPTED') {\r\n        deafultHeadingColor = 'redBackground'\r\n    }\r\n\r\n\r\n\r\n    // Progress bar UI\r\n    const progressBarUI = userData.progressCountStatus.map(key => {\r\n        let variant;\r\n        switch (key) {\r\n            case 'DEGRADED':\r\n                variant = 'warning';\r\n                break;\r\n            case 'DISRUPTED':\r\n                variant = 'danger';\r\n                break;\r\n            case 'OPERATIONAL':\r\n                variant = 'success';\r\n                break;\r\n            case 'UNKNOWN':\r\n                variant = 'secondary';\r\n                break;\r\n            default:\r\n                variant = 'info';\r\n                break;\r\n        }\r\n        return <ProgressBar variant={variant} now={10} key={key} />;\r\n    });\r\n\r\n\r\n\r\n    const getClassNameForPages = (e, pageName) => {\r\n        if (e['comparison'] === 'G') {\r\n            if (userData_Custom[pageName]?.current > e['critical_threshold']) {\r\n                return 'red';\r\n            }\r\n            if (userData_Custom[pageName]?.current >= e['warning_threshold'] && userData_Custom[pageName]?.current < e['critical_threshold']) {\r\n                return 'yellow';\r\n            }\r\n        }\r\n\r\n        if (e['comparison'] === 'L') {\r\n            if (userData_Custom[pageName]?.current < e['critical_threshold']) {\r\n                return 'red';\r\n            }\r\n            if (userData_Custom[pageName]?.current?.current < e['warning_threshold'] && userData_Custom[pageName]?.current > e['critical_threshold']) {\r\n                return 'yellow';\r\n            }\r\n        }\r\n\r\n        return 'green';\r\n    };\r\n\r\n    const pageClassNames = (pageName) => {\r\n\r\n\r\n        return metricComparison.map(e => {\r\n            if (e['custom_metric'] === pageName || e['standard_metric'] === pageName) {\r\n                return getClassNameForPages(e, pageName);\r\n            }\r\n            return '';\r\n        }).join(' ');\r\n    };\r\n\r\n    const showToolTipsValue = (pageName) => {\r\n        for (const pageObject of metricComparison) {\r\n            if (pageObject['standard_metric'] === pageName || pageObject['custom_metric'] === pageName) {\r\n                return (\r\n                    <div>\r\n                        Warning : {pageObject.warning_threshold}\r\n                        <br />\r\n                        Critical : {pageObject.critical_threshold}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Col>\r\n            <Card style={{ maxHeight: \"100%\", marginBottom: \"1.6rem\" }} border=\"dark\">\r\n                <Card.Header className={deafultHeadingColor}>\r\n                    {cardName}\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Card.Title>\r\n                        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                            <ProgressBar style={{ width: \"60%\" }}>{progressBarUI}</ProgressBar>\r\n                            <p style={{ marginLeft: \"10px\", marginBottom: \"0px\" }}> Host Status for 3h </p>\r\n                        </div>\r\n\r\n                    </Card.Title>\r\n                    <Card.Text>\r\n                        <ListGroup variant=\"flush\">\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}> Infrastructure Health </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={faCaretUp}\r\n                                            size=\"2x\"\r\n                                            style={{ color: \"green\" }}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        {userData_Custom.status_val ? userData_Custom.status_val : 'NA'}\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>\r\n                                        <span>Response Time (sec) </span>\r\n                                    </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={userData_Custom['Response time']?.current > userData_Custom['Response time']?.prev ? faCaretUp : faCaretDown}\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Response time')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Response time')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Response time']?.current ? userData_Custom['Response time']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Synthetic Availability (%) </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Synthetic availability']?.current >=\r\n                                                    userData_Custom['Synthetic availability']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Synthetic availability')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Synthetic availability')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Synthetic availability']?.current ?\r\n                                                    userData_Custom['Synthetic availability']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Throughput  </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['End user experience']?.current > userData_Custom['End user experience']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('End user experience')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('End user experience')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['End user experience']?.current ?\r\n                                                    userData_Custom['End user experience']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Login </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={userData_Custom['Login Page']?.current >\r\n                                                userData_Custom['Login Page']?.prev\r\n                                                ? faCaretUp\r\n                                                : faCaretDown}\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Login Page')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Login Page')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Login Page']?.current ?\r\n                                                    userData_Custom['Login Page']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>My Account Page</Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Partner Authentication']?.current > userData_Custom['Partner Authentication']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Partner Authentication')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Partner Authentication')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {\r\n                                                    userData_Custom['Partner Authentication']?.current ?\r\n                                                        userData_Custom['Partner Authentication']?.current.toFixed(2) : 'NA'\r\n                                                }\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Purchase</Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={\r\n                                                userData_Custom['Home Page']?.current > userData_Custom['Home Page']?.prev\r\n                                                    ? faCaretUp\r\n                                                    : faCaretDown\r\n                                            }\r\n                                            size=\"2x\"\r\n                                            className={pageClassNames('Home Page')}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>{showToolTipsValue('Home Page')}</Tooltip>\r\n                                            }>\r\n                                            <span>\r\n                                                {userData_Custom['Home Page']?.current ?\r\n                                                    userData_Custom['Home Page']?.current.toFixed(2) : 'NA'}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item className=\"listItemCustomPadding\">\r\n                                <Row>\r\n                                    <Col sm={7}>Active Alerts </Col>\r\n                                    <Col sm={1}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={faCaretUp}\r\n                                            size=\"2x\"\r\n                                            className='green'\r\n                                        />\r\n                                    </Col>\r\n                                    <Col sm={4} className='text-center'>\r\n                                        <OverlayTrigger\r\n                                            placement=\"top\"\r\n                                            overlay={\r\n                                                <Tooltip>\r\n                                                    {\r\n                                                        <div>\r\n                                                            Warning :{\" \"}\r\n                                                            {\r\n                                                                userData_Custom?.warningAlertCount?.current &&\r\n                                                                userData_Custom?.warningAlertCount?.current.toFixed(2)\r\n                                                            }\r\n                                                            <br />\r\n                                                            Critical :{\" \"}\r\n                                                            <a\r\n                                                                target=\"_blank\"\r\n                                                                href=\"/\"\r\n                                                            >\r\n                                                                {\r\n                                                                    userData_Custom?.criticalAlertCount?.current &&\r\n                                                                    userData_Custom?.criticalAlertCount?.current.toFixed(2)\r\n                                                                }\r\n                                                            </a>\r\n                                                        </div>\r\n                                                    }\r\n                                                </Tooltip>\r\n                                            }\r\n                                        >\r\n                                            <span style={{ cursor: \"pointer\" }}>\r\n                                                {userData_Custom?.criticalAlertCount?.current !== 0 || userData_Custom?.warningAlertCount?.current !== 0 ?\r\n                                                    (\r\n                                                        userData_Custom?.criticalAlertCount?.current +\r\n                                                        userData_Custom?.warningAlertCount?.current\r\n                                                    ).toFixed(2) : \"NA\"}\r\n                                            </span>\r\n                                        </OverlayTrigger>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        </Col>\r\n    );\r\n};\r\n\r\nexport default Ecommerce_B2C_User;\r\n\r\n\r\n\r\n// Function to make a NerdGraph query\r\nconst fetchNerdGraphQuery = async (query) => {\r\n    const response = await NerdGraphQuery.query({ query });\r\n    return response.data;\r\n};\r\n\r\n\r\nconst getOccuranceObject = (data) => {\r\n\r\n    var statusOccurances = {};\r\n    const timesliceData = data.actor.account.nrql.rawResponse.facets;\r\n\r\n    for (var i = 0; i < timesliceData.length; i++) {\r\n        if (timesliceData[i].name == \"UNKNOWN\") {\r\n            statusOccurances[\"unknown\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"unknown\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"OPERATIONAL\") {\r\n            statusOccurances[\"operational\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"operational\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"DISRUPTED\") {\r\n            statusOccurances[\"disrupted\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"disrupted\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else if (timesliceData[i].name == \"DEGRADED\") {\r\n            statusOccurances[\"degraded\"] = [];\r\n            for (var j = 0; j < timesliceData[i].timeSeries.length; j++) {\r\n                statusOccurances[\"degraded\"].push(\r\n                    timesliceData[i].timeSeries[j].inspectedCount\r\n                );\r\n            }\r\n        } else {\r\n            statusOccurances[\"unknown\"].push(0);\r\n            statusOccurances[\"operational\"].push(0);\r\n            statusOccurances[\"disrupted\"].push(0);\r\n            statusOccurances[\"degraded\"].push(0);\r\n        }\r\n    }\r\n\r\n    return statusOccurances\r\n}\r\n\r\nconst formatObject = (obj) => {\r\n\r\n    const keys = Object.keys(obj);\r\n\r\n    if (!keys.includes(\"unknown\")) {\r\n        obj[\"unknown\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"unknown\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"operational\")) {\r\n        obj[\"operational\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"operational\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"degraded\")) {\r\n        obj[\"degraded\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"degraded\"].push(0);\r\n        }\r\n    }\r\n\r\n    if (!keys.includes(\"disrupted\")) {\r\n        obj[\"disrupted\"] = [];\r\n        for (var i = 0; i < obj[Object.keys(obj)[0]].length; i++) {\r\n            obj[\"disrupted\"].push(0);\r\n        }\r\n    }\r\n\r\n    const result = [];\r\n    var output = [];\r\n    const maxLength = Math.max(\r\n        ...Object.values(obj).map((arr) => arr.length)\r\n    );\r\n\r\n    for (let i = 0; i < maxLength; i++) {\r\n        const formattedEntry = {};\r\n\r\n        for (const key in obj) {\r\n            formattedEntry[key] =\r\n                obj[key][i] !== undefined ? obj[key][i] : null;\r\n        }\r\n\r\n        result.push(formattedEntry);\r\n    }\r\n\r\n    for (var i = 0; i < result.length; i++) {\r\n        if (result[i].unknown != 0) {\r\n            output.push(\"UNKNOWN\");\r\n        } else if (result[i].degraded != 0) {\r\n            output.push(\"DEGRADED\");\r\n        } else if (result[i].disrupted != 0) {\r\n            output.push(\"DISRUPTED\");\r\n        } else {\r\n            output.push(\"OPERATIONAL\");\r\n        }\r\n    }\r\n    return output;\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport TimeDropdown from '../TimeDropdown/TimeDropdown';\r\nimport Searchbar from '../SearchBar/Searchbar';\r\nimport Cardlist from './Card/Cardlist';\r\nimport OCA_User_Journey from './Card/OCA_User_Journey'\r\nimport CPQ_User_Journey from './Card/CPQ_User_Journey'\r\nimport OSV from './Card/OSV'\r\nimport Ecommerce_B2B from './Card/Ecommerce_B2B'\r\nimport Ecommerce_B2C from './Card/Ecommerce_B2C'\r\n\r\nconst ParentCard = () => {\r\n    const [timeUpdater, setTimeUpdater] = useState('5 MINUTES')\r\n\r\n\r\n    const timeCollector = (time) => {\r\n        setTimeUpdater(time)\r\n    }\r\n\r\n    return (\r\n        <div style={{ maxWidth: \"100%\" }}>\r\n            <div style={{ maxWidth: \"95rem\", margin: \"auto\" }}>\r\n                <div>\r\n                    <Row >\r\n                        <Col >\r\n                            <Searchbar setSearchTerm={''} />\r\n                        </Col>\r\n                        <Col md={{ offset: 5 }} >\r\n                            <TimeDropdown timeCollector={timeCollector} />\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                <div>\r\n                    <Row xs={1} sm={2} md={2} lg={3} xl={3} >\r\n                        <Cardlist cardName={'Hardware Led Quote User Journey'} timeUpdater={timeUpdater} guid={'Mjc4MTY2N3xOUjF8V09SS0xPQUR8MjAzNzEy'} />\r\n                        <OCA_User_Journey cardName={'OCA User Journey'} timeUpdater={timeUpdater} guid={'Mjc4MTY2N3xOUjF8V09SS0xPQUR8MjAzNzEy'} />\r\n                        <CPQ_User_Journey cardName={'CPQ User Journey'} timeUpdater={timeUpdater} guid={'Mjc4MTY2N3xOUjF8V09SS0xPQUR8MjAzNzEy'} />\r\n                        <OSV cardName={'OSV User Journey'} timeUpdater={timeUpdater} guid={'Mjc4MTY2N3xOUjF8V09SS0xPQUR8MjAzNzEy'} />\r\n                        <Ecommerce_B2B cardName={'Ecommerce B2B User Journey'} timeUpdater={timeUpdater} guid={'Mjc4MTY2N3xOUjF8V09SS0xPQUR8MjAzNzEy'} />\r\n                        <Ecommerce_B2C cardName={'Ecommerce B2C User Journey'} timeUpdater={timeUpdater} guid={'Mjc4MTY2N3xOUjF8V09SS0xPQUR8MjAzNzEy'} />\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </Row>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ParentCard;","import Container from 'react-bootstrap/Container';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\nfunction TopBar() {\r\n    return (\r\n        <Navbar bg=\"light\" data-bs-theme=\"light\" sticky='top'>\r\n            <Container>\r\n                <Navbar.Brand style={{ fontWeight: \"800\", lineHeight: \"3rem\" }}>GCC Monitor 3 - User Journeys</Navbar.Brand>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default TopBar;","import React from 'react';\r\nimport ParentCard from './ParentCard/ParentCard';\r\nimport TopBar from \"./Navbar.js\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <div>\r\n            <TopBar />\r\n            <ParentCard />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\n\r\n\r\n// import bootstrap\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './Components/App';\r\n\r\nconst HomeNerdlet = () => {\r\n  return (\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n\r\n  );\r\n};\r\n\r\nexport default HomeNerdlet;\r\n","module.exports = (function() { throw new Error(\"Could not initialize \\\"nr1\\\"\"); })();","module.exports = (function() { throw new Error(\"Could not initialize \\\"__nr1-internal__\\\"\"); })();"],"sourceRoot":""}